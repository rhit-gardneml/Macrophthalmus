-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Timing_Adjust.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Timing_Adjust
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Preamble Detector/Timing Adjust
-- Hierarchy Level: 3
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Timing_Adjust IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        timingOffset                      :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
        timingOffsetValid                 :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic;
        SyncPulse                         :   OUT   std_logic
        );
END Timing_Adjust;


ARCHITECTURE rtl OF Timing_Adjust IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL count_step                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_from                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL timing_Reference_out1            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL timingOffset_unsigned            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL State_Register_out1              : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous3_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Delay_out1                       : std_logic;

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_re <= to_signed(16#0000#, 16);
      Delay4_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1_re <= dataIn_re_signed;
        Delay4_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  dataOut_re <= std_logic_vector(Delay4_out1_re);

  dataOut_im <= std_logic_vector(Delay4_out1_im);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1132
  count_step <= to_unsigned(16#001#, 11);

  count_from <= to_unsigned(16#000#, 11);

  count <= timing_Reference_out1 + count_step;

  
  need_to_wrap <= '1' WHEN timing_Reference_out1 = to_unsigned(16#46C#, 11) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= timing_Reference_out1 WHEN validIn = '0' ELSE
      count_value;

  timing_Reference_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      timing_Reference_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        timing_Reference_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS timing_Reference_process;


  timingOffset_unsigned <= unsigned(timingOffset);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Logical_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  State_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      State_Register_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Delay2_out1 = '1' THEN
          State_Register_out1 <= '0';
        ELSIF Logical_Operator_out1 = '1' THEN
          State_Register_out1 <= Logical_Operator_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS State_Register_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= State_Register_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator1_out1 <=  NOT Delay1_out1;

  Logical_Operator_out1 <= timingOffsetValid AND Logical_Operator1_out1;

  Unit_Delay_Enabled_Synchronous3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous3_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Logical_Operator_out1 = '1' THEN
        Unit_Delay_Enabled_Synchronous3_out1 <= timingOffset_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous3_process;


  
  Relational_Operator_relop1 <= '1' WHEN timing_Reference_out1 = Unit_Delay_Enabled_Synchronous3_out1 ELSE
      '0';

  Logical_Operator2_out1 <= State_Register_out1 AND (validIn AND Relational_Operator_relop1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Logical_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  validOut <= Delay3_out1;

  SyncPulse <= Delay_out1;

END rtl;

