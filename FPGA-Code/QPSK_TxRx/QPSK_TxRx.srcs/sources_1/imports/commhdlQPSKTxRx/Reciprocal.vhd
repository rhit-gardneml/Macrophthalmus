-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Reciprocal.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Reciprocal
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Phase Ambiguity Estimation and Correction/Phase 
-- Ambiguity Corrector/Reciproca
-- Hierarchy Level: 4
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Reciprocal IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(12 DOWNTO 0);  -- sfix13_En10
        dataOut                           :   OUT   std_logic_vector(25 DOWNTO 0)  -- sfix26_En14
        );
END Reciprocal;


ARCHITECTURE rtl OF Reciprocal IS

  -- Component Declarations
  COMPONENT Function_Impl
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          switch                          :   IN    std_logic;  -- ufix1
          LUTAddr                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          functionValues                  :   OUT   std_logic_vector(25 DOWNTO 0)  -- sfix26_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Function_Impl
    USE ENTITY work.Function_Impl(rtl);

  -- Signals
  SIGNAL dataIn_signed                    : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Data_Type_Conversion_out1        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Delay_out1                       : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Extract_Bits_out1                : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Data_Type_Conversion2_out1       : std_logic;  -- ufix1
  SIGNAL Delay2_out1                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Data_Type_Conversion1_out1       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Function_Impl_out1               : std_logic_vector(25 DOWNTO 0);  -- ufix26

BEGIN
  u_Function_Impl : Function_Impl
    PORT MAP( clk => clk,
              enb => enb,
              switch => Data_Type_Conversion2_out1,  -- ufix1
              LUTAddr => std_logic_vector(Data_Type_Conversion1_out1),  -- ufix12
              functionValues => Function_Impl_out1  -- sfix26_En14
              );

  dataIn_signed <= signed(dataIn);

  Data_Type_Conversion_out1 <= dataIn_signed;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Compare_To_Constant_out1 <= '1' WHEN Delay_out1 < to_signed(16#0000#, 13) ELSE
      '0';

  Extract_Bits_out1 <= signed(Delay_out1(11 DOWNTO 0));

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Compare_To_Constant_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Data_Type_Conversion2_out1 <= Delay1_out1;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_signed(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Extract_Bits_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Data_Type_Conversion1_out1 <= unsigned(Delay2_out1);

  dataOut <= Function_Impl_out1;

END rtl;

