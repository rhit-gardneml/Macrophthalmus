-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\QPSK_Modulator.vhd
-- Created: 2024-01-25 16:27:39
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_Modulator
-- Source Path: commhdlQPSKTxRx/QPSK Tx/QPSK Modulator
-- Hierarchy Level: 1
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_Modulator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic;
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validOut                          :   OUT   std_logic
        );
END QPSK_Modulator;


ARCHITECTURE rtl OF QPSK_Modulator IS

  -- Component Declarations
  COMPONENT QPSK_Modulator_Baseband
    PORT( in0                             :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          out0_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          out0_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_Modulator_Baseband
    USE ENTITY work.QPSK_Modulator_Baseband(rtl);

  -- Signals
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL count_step                       : std_logic;  -- ufix1
  SIGNAL count_from                       : std_logic;  -- ufix1
  SIGNAL HDL_Counter_out1                 : std_logic;  -- ufix1
  SIGNAL count                            : std_logic;  -- ufix1
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : std_logic;  -- ufix1
  SIGNAL count_1                          : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Null_out1_re                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Null_out1_im                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : std_logic;
  SIGNAL Mux_out1                         : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Delay4_out1                      : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL QPSK_Modulator_Baseband_out1_re  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL QPSK_Modulator_Baseband_out1_im  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL QPSK_Modulator_Baseband_out1_re_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL QPSK_Modulator_Baseband_out1_im_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay11_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay11_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch3_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch3_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_QPSK_Modulator_Baseband : QPSK_Modulator_Baseband
    PORT MAP( in0 => Delay4_out1,  -- boolean [2]
              out0_re => QPSK_Modulator_Baseband_out1_re,  -- sfix16_En15
              out0_im => QPSK_Modulator_Baseband_out1_im  -- sfix16_En15
              );

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  count_step <= '1';

  count_from <= '0';

  count <= HDL_Counter_out1 XOR count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = '1' ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN Delay1_out1 = '0' ELSE
      count_value;

  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN HDL_Counter_out1 = '1' ELSE
      '0';

  Logical_Operator1_out1 <= Compare_To_Constant1_out1 AND Delay1_out1;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Logical_Operator1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_out1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  
  switch_compare_1 <= '1' WHEN Delay12_out1 = '1' ELSE
      '0';

  Null_out1_re <= to_signed(16#0000#, 16);
  Null_out1_im <= to_signed(16#0000#, 16);

  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter_out1 = '0' ELSE
      '0';

  Logical_Operator_out1 <= Delay1_out1 AND Compare_To_Constant_out1;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= dataIn;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Logical_Operator_out1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  Mux_out1(0) <= Unit_Delay_Enabled_Synchronous_out1;
  Mux_out1(1) <= Delay_out1;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Mux_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  QPSK_Modulator_Baseband_out1_re_signed <= signed(QPSK_Modulator_Baseband_out1_re);

  QPSK_Modulator_Baseband_out1_im_signed <= signed(QPSK_Modulator_Baseband_out1_im);

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_re <= to_signed(16#0000#, 16);
      Delay11_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1_re <= QPSK_Modulator_Baseband_out1_re_signed;
        Delay11_out1_im <= QPSK_Modulator_Baseband_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  
  Switch3_out1_re <= Null_out1_re WHEN switch_compare_1 = '0' ELSE
      Delay11_out1_re;
  
  Switch3_out1_im <= Null_out1_im WHEN switch_compare_1 = '0' ELSE
      Delay11_out1_im;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_re <= to_signed(16#0000#, 16);
      Delay2_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_re <= Switch3_out1_re;
        Delay2_out1_im <= Switch3_out1_im;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  dataOut_re <= std_logic_vector(Delay2_out1_re);

  dataOut_im <= std_logic_vector(Delay2_out1_im);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Delay12_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  validOut <= Delay3_out1;

END rtl;

