-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\RAM_Frame_Status_Indicator.vhd
-- Created: 2024-01-25 16:27:39
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RAM_Frame_Status_Indicator
-- Source Path: commhdlQPSKTxRx/QPSK Tx/Bit Packetizer/Data Bits FIFO/RAM Frame Status Indicator
-- Hierarchy Level: 3
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RAM_Frame_Status_Indicator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        push                              :   IN    std_logic;
        pop                               :   IN    std_logic;
        out_rsvd                          :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
        );
END RAM_Frame_Status_Indicator;


ARCHITECTURE rtl OF RAM_Frame_Status_Indicator IS

  -- Signals
  SIGNAL out_tmp                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL pushCount                        : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL popCount                         : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL frameCount                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL pushCount_next                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL popCount_next                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL frameCount_next                  : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  RAM_Frame_Status_Indicator_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pushCount <= to_unsigned(16#000#, 12);
      frameCount <= to_unsigned(16#0#, 2);
      popCount <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        pushCount <= pushCount_next;
        popCount <= popCount_next;
        frameCount <= frameCount_next;
      END IF;
    END IF;
  END PROCESS RAM_Frame_Status_Indicator_1_process;

  RAM_Frame_Status_Indicator_1_output : PROCESS (frameCount, pop, popCount, push, pushCount)
    VARIABLE frameCount_temp : unsigned(1 DOWNTO 0);
  BEGIN
    frameCount_temp := frameCount;
    pushCount_next <= pushCount;
    popCount_next <= popCount;
    IF (pushCount = to_unsigned(16#8BF#, 12)) AND push = '1' THEN 
      frameCount_temp := frameCount + to_unsigned(16#1#, 2);
    END IF;
    IF (popCount = to_unsigned(16#8BF#, 12)) AND pop = '1' THEN 
      frameCount_temp := frameCount_temp - to_unsigned(16#1#, 2);
    END IF;
    IF push = '1' THEN 
      IF pushCount = to_unsigned(16#8BF#, 12) THEN 
        pushCount_next <= to_unsigned(16#000#, 12);
      ELSE 
        pushCount_next <= pushCount + to_unsigned(16#001#, 12);
      END IF;
    END IF;
    IF pop = '1' THEN 
      IF popCount = to_unsigned(16#8BF#, 12) THEN 
        popCount_next <= to_unsigned(16#000#, 12);
      ELSE 
        popCount_next <= popCount + to_unsigned(16#001#, 12);
      END IF;
    END IF;
    out_tmp <= frameCount_temp;
    frameCount_next <= frameCount_temp;
  END PROCESS RAM_Frame_Status_Indicator_1_output;


  out_rsvd <= std_logic_vector(out_tmp);

END rtl;

