-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Phase_Error_Detector.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Phase_Error_Detector
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Carrier Synchronizer/Phase Error Detector
-- Hierarchy Level: 3
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Phase_Error_Detector IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        PhaseError                        :   OUT   std_logic_vector(12 DOWNTO 0)  -- sfix13_En10
        );
END Phase_Error_Detector;


ARCHITECTURE rtl OF Phase_Error_Detector IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant1_out1                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Constant_out1                    : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Switch_out1                      : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Delay_reg                        : vector_of_signed2(0 TO 1);  -- sfix2 [2]
  SIGNAL Delay_out1                       : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Delay1_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_out1                     : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay4_reg                       : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay4_out1                      : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay2_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant3_out1                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Constant2_out1                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Switch1_out1                     : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Delay3_reg                       : vector_of_signed2(0 TO 1);  -- sfix2 [2]
  SIGNAL Delay3_out1                      : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Product1_out1                    : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Delay5_reg                       : vector_of_signed18(0 TO 1);  -- sfix18 [2]
  SIGNAL Delay5_out1                      : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Add_sub_cast                     : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Add_sub_cast_1                   : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Add_out1                         : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Delay6_reg                       : vector_of_signed19(0 TO 1);  -- sfix19 [2]
  SIGNAL Delay6_out1                      : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Data_Type_Conversion3_out1       : signed(12 DOWNTO 0);  -- sfix13_En10

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  
  Compare_To_Constant_out1 <= '1' WHEN dataIn_re_signed >= to_signed(16#0000#, 16) ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Compare_To_Constant_out1 = '1' ELSE
      '0';

  Constant1_out1 <= to_signed(-16#1#, 2);

  Constant_out1 <= to_signed(16#1#, 2);

  
  Switch_out1 <= Constant1_out1 WHEN switch_compare_1 = '0' ELSE
      Constant_out1;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => to_signed(16#0#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg(0) <= Switch_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg(0) <= dataIn_im_signed;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Product_out1 <= Delay_out1 * Delay1_out1;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Product_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= dataIn_re_signed;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  
  Compare_To_Constant1_out1 <= '1' WHEN dataIn_im_signed >= to_signed(16#0000#, 16) ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN Compare_To_Constant1_out1 = '1' ELSE
      '0';

  Constant3_out1 <= to_signed(-16#1#, 2);

  Constant2_out1 <= to_signed(16#1#, 2);

  
  Switch1_out1 <= Constant3_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant2_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => to_signed(16#0#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Switch1_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Product1_out1 <= Delay2_out1 * Delay3_out1;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= Product1_out1;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  Add_sub_cast <= resize(Delay4_out1, 19);
  Add_sub_cast_1 <= resize(Delay5_out1, 19);
  Add_out1 <= Add_sub_cast - Add_sub_cast_1;

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_reg(0) <= Add_out1;
        Delay6_reg(1) <= Delay6_reg(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(1);

  Data_Type_Conversion3_out1 <= Delay6_out1(16 DOWNTO 4);

  PhaseError <= std_logic_vector(Data_Type_Conversion3_out1);

END rtl;

