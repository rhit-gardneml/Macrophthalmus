-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Phase_Ambiguity_Estimation_and_Correction.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Phase_Ambiguity_Estimation_and_Correction
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Phase Ambiguity Estimation and Correction
-- Hierarchy Level: 2
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Phase_Ambiguity_Estimation_and_Correction IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        syncPulseIn                       :   IN    std_logic;
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        syncPulseOut                      :   OUT   std_logic;
        validOut                          :   OUT   std_logic
        );
END Phase_Ambiguity_Estimation_and_Correction;


ARCHITECTURE rtl OF Phase_Ambiguity_Estimation_and_Correction IS

  -- Component Declarations
  COMPONENT Phase_Ambiguity_Estimator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          syncPulse                       :   IN    std_logic;
          validIn                         :   IN    std_logic;
          endOut                          :   OUT   std_logic;
          estOut_re                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En29
          estOut_im                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En29
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Average_Estimates
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          endIn                           :   IN    std_logic;
          estin_re                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En29
          estin_im                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En29
          validIn                         :   IN    std_logic;
          avgEst_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          avgEst_im                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Phase_Ambiguity_Corrector
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          estimate_re                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          estimate_im                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Phase_Ambiguity_Estimator
    USE ENTITY work.Phase_Ambiguity_Estimator(rtl);

  FOR ALL : Average_Estimates
    USE ENTITY work.Average_Estimates(rtl);

  FOR ALL : Phase_Ambiguity_Corrector
    USE ENTITY work.Phase_Ambiguity_Corrector(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_reg_re                    : vector_of_signed16(0 TO 7);  -- sfix16_En14 [8]
  SIGNAL Delay5_reg_im                    : vector_of_signed16(0 TO 7);  -- sfix16_En14 [8]
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_reg_re                     : vector_of_signed16(0 TO 31);  -- sfix16_En14 [32]
  SIGNAL Delay_reg_im                     : vector_of_signed16(0 TO 31);  -- sfix16_En14 [32]
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay13_reg_re                   : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Delay13_reg_im                   : vector_of_signed16(0 TO 4);  -- sfix16_En14 [5]
  SIGNAL Delay13_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay13_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay8_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay8_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_reg                       : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(31 DOWNTO 0);  -- ufix1 [32]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Phase_Ambiguity_Estimator_out1   : std_logic;
  SIGNAL Phase_Ambiguity_Estimator_out2_re : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Phase_Ambiguity_Estimator_out2_im : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Phase_Ambiguity_Estimator_out3   : std_logic;
  SIGNAL Average_Estimates_out1_re        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Average_Estimates_out1_im        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Delay12_reg                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Phase_Ambiguity_Corrector_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Phase_Ambiguity_Corrector_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Phase_Ambiguity_Corrector_out2   : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(31 DOWNTO 0);  -- ufix1 [32]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay11_reg                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay10_reg                      : std_logic_vector(21 DOWNTO 0);  -- ufix1 [22]
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay9_reg                       : std_logic_vector(9 DOWNTO 0);  -- ufix1 [10]
  SIGNAL Delay9_out1                      : std_logic;

BEGIN
  u_Phase_Ambiguity_Estimator : Phase_Ambiguity_Estimator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Delay_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay_out1_im),  -- sfix16_En14
              syncPulse => syncPulseIn,
              validIn => Delay2_out1,
              endOut => Phase_Ambiguity_Estimator_out1,
              estOut_re => Phase_Ambiguity_Estimator_out2_re,  -- sfix32_En29
              estOut_im => Phase_Ambiguity_Estimator_out2_im,  -- sfix32_En29
              validOut => Phase_Ambiguity_Estimator_out3
              );

  u_Average_Estimates : Average_Estimates
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              endIn => Phase_Ambiguity_Estimator_out1,
              estin_re => Phase_Ambiguity_Estimator_out2_re,  -- sfix32_En29
              estin_im => Phase_Ambiguity_Estimator_out2_im,  -- sfix32_En29
              validIn => Phase_Ambiguity_Estimator_out3,
              avgEst_re => Average_Estimates_out1_re,  -- sfix16_En14
              avgEst_im => Average_Estimates_out1_im  -- sfix16_En14
              );

  u_Phase_Ambiguity_Corrector : Phase_Ambiguity_Corrector
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Delay8_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay8_out1_im),  -- sfix16_En14
              estimate_re => Average_Estimates_out1_re,  -- sfix16_En14
              estimate_im => Average_Estimates_out1_im,  -- sfix16_En14
              validIn => Delay7_out1,
              dataOut_re => Phase_Ambiguity_Corrector_out1_re,  -- sfix16_En14
              dataOut_im => Phase_Ambiguity_Corrector_out1_im,  -- sfix16_En14
              validOut => Phase_Ambiguity_Corrector_out2
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay5_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg_im(0) <= dataIn_im_signed;
        Delay5_reg_im(1 TO 7) <= Delay5_reg_im(0 TO 6);
        Delay5_reg_re(0) <= dataIn_re_signed;
        Delay5_reg_re(1 TO 7) <= Delay5_reg_re(0 TO 6);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1_re <= Delay5_reg_re(7);
  Delay5_out1_im <= Delay5_reg_im(7);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg_im(0) <= Delay5_out1_im;
        Delay_reg_im(1 TO 31) <= Delay_reg_im(0 TO 30);
        Delay_reg_re(0) <= Delay5_out1_re;
        Delay_reg_re(1 TO 31) <= Delay_reg_re(0 TO 30);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1_re <= Delay_reg_re(31);
  Delay_out1_im <= Delay_reg_im(31);

  Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay13_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay13_reg_im(0) <= Delay_out1_im;
        Delay13_reg_im(1 TO 4) <= Delay13_reg_im(0 TO 3);
        Delay13_reg_re(0) <= Delay_out1_re;
        Delay13_reg_re(1 TO 4) <= Delay13_reg_re(0 TO 3);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1_re <= Delay13_reg_re(4);
  Delay13_out1_im <= Delay13_reg_im(4);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1_re <= to_signed(16#0000#, 16);
      Delay8_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1_re <= Delay13_out1_re;
        Delay8_out1_im <= Delay13_out1_im;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= validIn;
        Delay4_reg(7 DOWNTO 1) <= Delay4_reg(6 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(7);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Delay4_out1;
        Delay2_reg(31 DOWNTO 1) <= Delay2_reg(30 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(31);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_reg(0) <= Delay2_out1;
        Delay12_reg(4 DOWNTO 1) <= Delay12_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(4);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_out1 <= Delay12_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= syncPulseIn;
        Delay3_reg(7 DOWNTO 1) <= Delay3_reg(6 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(7);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg(0) <= Delay3_out1;
        Delay1_reg(31 DOWNTO 1) <= Delay1_reg(30 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(31);

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_reg(0) <= Delay1_out1;
        Delay11_reg(4 DOWNTO 1) <= Delay11_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(4);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= Delay11_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_reg(0) <= Delay6_out1;
        Delay10_reg(21 DOWNTO 1) <= Delay10_reg(20 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(21);

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_reg(0) <= Delay10_out1;
        Delay9_reg(9 DOWNTO 1) <= Delay9_reg(8 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(9);

  dataOut_re <= Phase_Ambiguity_Corrector_out1_re;

  dataOut_im <= Phase_Ambiguity_Corrector_out1_im;

  syncPulseOut <= Delay9_out1;

  validOut <= Phase_Ambiguity_Corrector_out2;

END rtl;

