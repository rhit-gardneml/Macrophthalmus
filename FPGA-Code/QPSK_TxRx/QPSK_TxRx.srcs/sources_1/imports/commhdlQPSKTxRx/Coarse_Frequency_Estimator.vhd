-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Coarse_Frequency_Estimator.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Coarse_Frequency_Estimator
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Coarse Frequency Compensator/Coarse Frequency 
-- Estimato
-- Hierarchy Level: 3
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Coarse_Frequency_Estimator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        validIn                           :   IN    std_logic;
        normFreqEst                       :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En34
        );
END Coarse_Frequency_Estimator;


ARCHITECTURE rtl OF Coarse_Frequency_Estimator IS

  -- Component Declarations
  COMPONENT Integrator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          dataIn_im                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          validIn                         :   IN    std_logic;
          IntegOut_re                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          IntegOut_im                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          IntegValid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Extract_Frequency
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          datain_re                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          datain_im                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          validIn                         :   IN    std_logic;
          normFreqOut                     :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En34
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Integrator
    USE ENTITY work.Integrator(rtl);

  FOR ALL : Extract_Frequency
    USE ENTITY work.Extract_Frequency(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay7_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]
  SIGNAL Delay7_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]
  SIGNAL Delay7_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay7_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_re : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_im : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay12_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay12_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL conj_cast                        : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL conj_cast_1                      : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Math_Function_out1_re            : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Math_Function_out1_im            : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay8_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]
  SIGNAL Delay8_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]
  SIGNAL Delay8_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay8_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product_mul_temp                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp_1               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp_2               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp_3               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_out1_re                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_out1_im                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_reg_re                    : vector_of_signed32(0 TO 1);  -- sfix32_En24 [2]
  SIGNAL Delay5_reg_im                    : vector_of_signed32(0 TO 1);  -- sfix32_En24 [2]
  SIGNAL Delay5_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Gain1_cast                       : signed(47 DOWNTO 0);  -- sfix48_En39
  SIGNAL Gain1_cast_1                     : signed(46 DOWNTO 0);  -- sfix47_En39
  SIGNAL Gain1_cast_2                     : signed(47 DOWNTO 0);  -- sfix48_En39
  SIGNAL Gain1_cast_3                     : signed(46 DOWNTO 0);  -- sfix47_En39
  SIGNAL Gain1_out1_re                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Gain1_out1_im                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay2_reg_re                    : vector_of_signed32(0 TO 1);  -- sfix32_En24 [2]
  SIGNAL Delay2_reg_im                    : vector_of_signed32(0 TO 1);  -- sfix32_En24 [2]
  SIGNAL Delay2_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay2_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay6_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Integrator_out1_re               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Integrator_out1_im               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Integrator_out2                  : std_logic;
  SIGNAL Integrator_out1_re_signed        : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Integrator_out1_im_signed        : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay10_out1_re                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay10_out1_im                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Extract_Frequency_out1           : std_logic_vector(34 DOWNTO 0);  -- ufix35

BEGIN
  u_Integrator : Integrator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Delay2_out1_re),  -- sfix32_En24
              dataIn_im => std_logic_vector(Delay2_out1_im),  -- sfix32_En24
              validIn => Delay4_out1,
              IntegOut_re => Integrator_out1_re,  -- sfix32_En24
              IntegOut_im => Integrator_out1_im,  -- sfix32_En24
              IntegValid => Integrator_out2
              );

  u_Extract_Frequency : Extract_Frequency
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              datain_re => std_logic_vector(Delay10_out1_re),  -- sfix32_En24
              datain_im => std_logic_vector(Delay10_out1_im),  -- sfix32_En24
              validIn => Delay11_out1,
              normFreqOut => Extract_Frequency_out1  -- sfix35_En34
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_re <= to_signed(16#0000#, 16);
      Delay1_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_re <= dataIn_re_signed;
        Delay1_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay7_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_reg_im(0) <= Delay1_out1_im;
        Delay7_reg_im(1) <= Delay7_reg_im(0);
        Delay7_reg_re(0) <= Delay1_out1_re;
        Delay7_reg_re(1) <= Delay7_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1_re <= Delay7_reg_re(1);
  Delay7_out1_im <= Delay7_reg_im(1);

  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous_out1_re <= to_signed(16#0000#, 16);
      Unit_Delay_Enabled_Synchronous_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND validIn = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1_re <= dataIn_re_signed;
        Unit_Delay_Enabled_Synchronous_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1_re <= to_signed(16#0000#, 16);
      Delay12_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_out1_re <= Unit_Delay_Enabled_Synchronous_out1_re;
        Delay12_out1_im <= Unit_Delay_Enabled_Synchronous_out1_im;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Math_Function_out1_re <= Delay12_out1_re;
  conj_cast <= resize(Delay12_out1_im, 17);
  conj_cast_1 <=  - (conj_cast);
  
  Math_Function_out1_im <= X"7FFF" WHEN (conj_cast_1(16) = '0') AND (conj_cast_1(15) /= '0') ELSE
      X"8000" WHEN (conj_cast_1(16) = '1') AND (conj_cast_1(15) /= '1') ELSE
      conj_cast_1(15 DOWNTO 0);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay8_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_reg_im(0) <= Math_Function_out1_im;
        Delay8_reg_im(1) <= Delay8_reg_im(0);
        Delay8_reg_re(0) <= Math_Function_out1_re;
        Delay8_reg_re(1) <= Delay8_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1_re <= Delay8_reg_re(1);
  Delay8_out1_im <= Delay8_reg_im(1);

  Product_mul_temp <= Delay7_out1_re * Delay8_out1_re;
  Product_mul_temp_1 <= Delay7_out1_im * Delay8_out1_im;
  Product_out1_re <= Product_mul_temp - Product_mul_temp_1;
  Product_mul_temp_2 <= Delay7_out1_im * Delay8_out1_re;
  Product_mul_temp_3 <= Delay7_out1_re * Delay8_out1_im;
  Product_out1_im <= Product_mul_temp_2 + Product_mul_temp_3;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg_re <= (OTHERS => to_signed(0, 32));
      Delay5_reg_im <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg_im(0) <= Product_out1_im;
        Delay5_reg_im(1) <= Delay5_reg_im(0);
        Delay5_reg_re(0) <= Product_out1_re;
        Delay5_reg_re(1) <= Delay5_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1_re <= Delay5_reg_re(1);
  Delay5_out1_im <= Delay5_reg_im(1);

  Gain1_cast <= resize(Delay5_out1_re, 48);
  Gain1_cast_1 <= Gain1_cast(46 DOWNTO 0);
  Gain1_out1_re <= Gain1_cast_1(46 DOWNTO 15);
  Gain1_cast_2 <= resize(Delay5_out1_im, 48);
  Gain1_cast_3 <= Gain1_cast_2(46 DOWNTO 0);
  Gain1_out1_im <= Gain1_cast_3(46 DOWNTO 15);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg_re <= (OTHERS => to_signed(0, 32));
      Delay2_reg_im <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg_im(0) <= Gain1_out1_im;
        Delay2_reg_im(1) <= Delay2_reg_im(0);
        Delay2_reg_re(0) <= Gain1_out1_re;
        Delay2_reg_re(1) <= Delay2_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(1);
  Delay2_out1_im <= Delay2_reg_im(1);

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_reg(0) <= Delay9_out1;
        Delay6_reg(1) <= Delay6_reg(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(1);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Delay6_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Delay3_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Integrator_out1_re_signed <= signed(Integrator_out1_re);

  Integrator_out1_im_signed <= signed(Integrator_out1_im);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_out1_re <= to_signed(0, 32);
      Delay10_out1_im <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_out1_re <= Integrator_out1_re_signed;
        Delay10_out1_im <= Integrator_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1 <= Integrator_out2;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  normFreqEst <= Extract_Frequency_out1;

END rtl;

