-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\RRC_Transmit_Filter.vhd
-- Created: 2024-01-25 16:27:39
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RRC_Transmit_Filter
-- Source Path: commhdlQPSKTxRx/QPSK Tx/RRC Transmit Filter
-- Hierarchy Level: 1
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RRC_Transmit_Filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END RRC_Transmit_Filter;


ARCHITECTURE rtl OF RRC_Transmit_Filter IS

  -- Component Declarations
  COMPONENT RRC_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          dataIn_im                       :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En16
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          dataOut_im                      :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : RRC_Filter
    USE ENTITY work.RRC_Filter(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Data_Type_Conversion_out1_re     : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Data_Type_Conversion_out1_im     : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Delay3_out1_re                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Delay3_out1_im                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Unit_Delay_Enabled_Synchronous1_out1 : std_logic;
  SIGNAL RRC_Filter_out1_re               : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL RRC_Filter_out1_im               : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL RRC_Filter_out2                  : std_logic;
  SIGNAL RRC_Filter_out1_re_signed        : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL RRC_Filter_out1_im_signed        : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Data_Type_Conversion1_out1_re    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion1_out1_im    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_RRC_Filter : RRC_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Delay3_out1_re),  -- sfix17_En16
              dataIn_im => std_logic_vector(Delay3_out1_im),  -- sfix17_En16
              validIn => Unit_Delay_Enabled_Synchronous1_out1,
              dataOut_re => RRC_Filter_out1_re,  -- sfix17_En14
              dataOut_im => RRC_Filter_out1_im,  -- sfix17_En14
              validOut => RRC_Filter_out2
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Data_Type_Conversion_out1_re <= dataIn_re_signed & '0';
  Data_Type_Conversion_out1_im <= dataIn_im_signed & '0';

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_re <= to_signed(16#00000#, 17);
      Delay3_out1_im <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1_re <= Data_Type_Conversion_out1_re;
        Delay3_out1_im <= Data_Type_Conversion_out1_im;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Unit_Delay_Enabled_Synchronous1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND validIn = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous1_process;


  RRC_Filter_out1_re_signed <= signed(RRC_Filter_out1_re);

  RRC_Filter_out1_im_signed <= signed(RRC_Filter_out1_im);

  Data_Type_Conversion1_out1_re <= RRC_Filter_out1_re_signed(15 DOWNTO 0);
  Data_Type_Conversion1_out1_im <= RRC_Filter_out1_im_signed(15 DOWNTO 0);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_re <= to_signed(16#0000#, 16);
      Delay1_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_re <= Data_Type_Conversion1_out1_re;
        Delay1_out1_im <= Data_Type_Conversion1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  dataOut_re <= std_logic_vector(Delay1_out1_re);

  dataOut_im <= std_logic_vector(Delay1_out1_im);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= RRC_Filter_out2;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  validOut <= Delay2_out1;

END rtl;

