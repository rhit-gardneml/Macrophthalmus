-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Coarse_Frequency_Compensator.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Coarse_Frequency_Compensator
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Coarse Frequency Compensator
-- Hierarchy Level: 2
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Coarse_Frequency_Compensator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        rstCS                             :   OUT   std_logic;
        validOut                          :   OUT   std_logic;
        normalizedFreqEst                 :   OUT   std_logic_vector(20 DOWNTO 0)  -- sfix21_En21
        );
END Coarse_Frequency_Compensator;


ARCHITECTURE rtl OF Coarse_Frequency_Compensator IS

  -- Component Declarations
  COMPONENT Raise_Power_to_4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Coarse_Frequency_Estimator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          validIn                         :   IN    std_logic;
          normFreqEst                     :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En34
          );
  END COMPONENT;

  COMPONENT NCO_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inc                             :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21
          validIn                         :   IN    std_logic;
          complexexp_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          complexexp_im                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT CFO_step_change_detector
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En21
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Raise_Power_to_4
    USE ENTITY work.Raise_Power_to_4(rtl);

  FOR ALL : Coarse_Frequency_Estimator
    USE ENTITY work.Coarse_Frequency_Estimator(rtl);

  FOR ALL : NCO_block
    USE ENTITY work.NCO_block(rtl);

  FOR ALL : CFO_step_change_detector
    USE ENTITY work.CFO_step_change_detector(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_reg_re                    : vector_of_signed16(0 TO 8);  -- sfix16_En14 [9]
  SIGNAL Delay1_reg_im                    : vector_of_signed16(0 TO 8);  -- sfix16_En14 [9]
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay7_reg_re                    : vector_of_signed16(0 TO 11);  -- sfix16_En14 [12]
  SIGNAL Delay7_reg_im                    : vector_of_signed16(0 TO 11);  -- sfix16_En14 [12]
  SIGNAL Delay7_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay7_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_reg_re                    : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL Delay3_reg_im                    : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay11_reg_re                   : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay11_reg_im                   : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay11_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay11_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion2_out1_re    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Data_Type_Conversion2_out1_im    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Raise_Power_to_4_out1_re         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Raise_Power_to_4_out1_im         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Raise_Power_to_4_out2            : std_logic;
  SIGNAL Coarse_Frequency_Estimator_out1  : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL Coarse_Frequency_Estimator_out1_signed : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL Gain_cast                        : signed(37 DOWNTO 0);  -- sfix38_En36
  SIGNAL Gain_cast_1                      : signed(36 DOWNTO 0);  -- sfix37_En36
  SIGNAL Gain_out1                        : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL Data_Type_Conversion3_out1       : signed(20 DOWNTO 0);  -- sfix21_En21
  SIGNAL Data_Type_Conversion4_out1       : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL Delay2_reg                       : std_logic_vector(8 DOWNTO 0);  -- ufix1 [9]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay8_reg                       : std_logic_vector(11 DOWNTO 0);  -- ufix1 [12]
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL NCO_out1_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out1_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out1_re_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL NCO_out1_im_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL conj_cast                        : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL conj_cast_1                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Math_Function_out1_re            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Math_Function_out1_im            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay12_reg_re                   : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay12_reg_im                   : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay12_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay12_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_sub_cast                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_sub_cast_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_add_cast                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_add_cast_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay13_reg_re                   : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay13_reg_im                   : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay13_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay13_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL CFO_step_change_detector_out1    : std_logic;
  SIGNAL Delay16_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay16_out1                     : std_logic;
  SIGNAL Delay17_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay17_out1                     : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay14_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL Delay15_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay15_out1                     : std_logic;

BEGIN
  u_Raise_Power_to_4 : Raise_Power_to_4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Data_Type_Conversion2_out1_re),  -- sfix16_En12
              dataIn_im => std_logic_vector(Data_Type_Conversion2_out1_im),  -- sfix16_En12
              validIn => Delay6_out1,
              dataOut_re => Raise_Power_to_4_out1_re,  -- sfix16_En12
              dataOut_im => Raise_Power_to_4_out1_im,  -- sfix16_En12
              validOut => Raise_Power_to_4_out2
              );

  u_Coarse_Frequency_Estimator : Coarse_Frequency_Estimator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => Raise_Power_to_4_out1_re,  -- sfix16_En12
              dataIn_im => Raise_Power_to_4_out1_im,  -- sfix16_En12
              validIn => Raise_Power_to_4_out2,
              normFreqEst => Coarse_Frequency_Estimator_out1  -- sfix35_En34
              );

  u_NCO : NCO_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              inc => std_logic_vector(Data_Type_Conversion4_out1),  -- sfix21
              validIn => Delay8_out1,
              complexexp_re => NCO_out1_re,  -- sfix16_En14
              complexexp_im => NCO_out1_im  -- sfix16_En14
              );

  u_CFO_step_change_detector : CFO_step_change_detector
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In1 => std_logic_vector(Data_Type_Conversion3_out1),  -- sfix21_En21
              Out1 => CFO_step_change_detector_out1
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_re <= to_signed(16#0000#, 16);
      Delay5_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1_re <= dataIn_re_signed;
        Delay5_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg_im(0) <= Delay5_out1_im;
        Delay1_reg_im(1 TO 8) <= Delay1_reg_im(0 TO 7);
        Delay1_reg_re(0) <= Delay5_out1_re;
        Delay1_reg_re(1 TO 8) <= Delay1_reg_re(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(8);
  Delay1_out1_im <= Delay1_reg_im(8);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay7_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_reg_im(0) <= Delay1_out1_im;
        Delay7_reg_im(1 TO 11) <= Delay7_reg_im(0 TO 10);
        Delay7_reg_re(0) <= Delay1_out1_re;
        Delay7_reg_re(1 TO 11) <= Delay7_reg_re(0 TO 10);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1_re <= Delay7_reg_re(11);
  Delay7_out1_im <= Delay7_reg_im(11);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay3_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg_im(0) <= Delay7_out1_im;
        Delay3_reg_im(1 TO 5) <= Delay3_reg_im(0 TO 4);
        Delay3_reg_re(0) <= Delay7_out1_re;
        Delay3_reg_re(1 TO 5) <= Delay3_reg_re(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1_re <= Delay3_reg_re(5);
  Delay3_out1_im <= Delay3_reg_im(5);

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay11_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_reg_im(0) <= Delay3_out1_im;
        Delay11_reg_im(1) <= Delay11_reg_im(0);
        Delay11_reg_re(0) <= Delay3_out1_re;
        Delay11_reg_re(1) <= Delay11_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1_re <= Delay11_reg_re(1);
  Delay11_out1_im <= Delay11_reg_im(1);

  Data_Type_Conversion2_out1_re <= resize(Delay5_out1_re(15 DOWNTO 2), 16);
  Data_Type_Conversion2_out1_im <= resize(Delay5_out1_im(15 DOWNTO 2), 16);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Coarse_Frequency_Estimator_out1_signed <= signed(Coarse_Frequency_Estimator_out1);

  Gain_cast <= resize(Coarse_Frequency_Estimator_out1_signed, 38);
  Gain_cast_1 <= Gain_cast(36 DOWNTO 0);
  Gain_out1 <= Gain_cast_1(36 DOWNTO 2);

  Data_Type_Conversion3_out1 <= Gain_out1(33 DOWNTO 13);

  Data_Type_Conversion4_out1 <= Data_Type_Conversion3_out1;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Delay6_out1;
        Delay2_reg(8 DOWNTO 1) <= Delay2_reg(7 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(8);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_reg(0) <= Delay2_out1;
        Delay8_reg(11 DOWNTO 1) <= Delay8_reg(10 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(11);

  NCO_out1_re_signed <= signed(NCO_out1_re);

  NCO_out1_im_signed <= signed(NCO_out1_im);

  Math_Function_out1_re <= NCO_out1_re_signed;
  conj_cast <= resize(NCO_out1_im_signed, 17);
  conj_cast_1 <=  - (conj_cast);
  
  Math_Function_out1_im <= X"7FFF" WHEN (conj_cast_1(16) = '0') AND (conj_cast_1(15) /= '0') ELSE
      X"8000" WHEN (conj_cast_1(16) = '1') AND (conj_cast_1(15) /= '1') ELSE
      conj_cast_1(15 DOWNTO 0);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay12_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_reg_im(0) <= Math_Function_out1_im;
        Delay12_reg_im(1) <= Delay12_reg_im(0);
        Delay12_reg_re(0) <= Math_Function_out1_re;
        Delay12_reg_re(1) <= Delay12_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1_re <= Delay12_reg_re(1);
  Delay12_out1_im <= Delay12_reg_im(1);

  Product1_mul_temp <= Delay11_out1_re * Delay12_out1_re;
  Product1_sub_cast <= Product1_mul_temp(29 DOWNTO 14);
  Product1_mul_temp_1 <= Delay11_out1_im * Delay12_out1_im;
  Product1_sub_cast_1 <= Product1_mul_temp_1(29 DOWNTO 14);
  Product1_out1_re <= Product1_sub_cast - Product1_sub_cast_1;
  Product1_mul_temp_2 <= Delay11_out1_im * Delay12_out1_re;
  Product1_add_cast <= Product1_mul_temp_2(29 DOWNTO 14);
  Product1_mul_temp_3 <= Delay11_out1_re * Delay12_out1_im;
  Product1_add_cast_1 <= Product1_mul_temp_3(29 DOWNTO 14);
  Product1_out1_im <= Product1_add_cast + Product1_add_cast_1;

  Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay13_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay13_reg_im(0) <= Product1_out1_im;
        Delay13_reg_im(1) <= Delay13_reg_im(0);
        Delay13_reg_re(0) <= Product1_out1_re;
        Delay13_reg_re(1) <= Delay13_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1_re <= Delay13_reg_re(1);
  Delay13_out1_im <= Delay13_reg_im(1);

  dataOut_re <= std_logic_vector(Delay13_out1_re);

  dataOut_im <= std_logic_vector(Delay13_out1_im);

  Delay16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_reg(0) <= CFO_step_change_detector_out1;
        Delay16_reg(1) <= Delay16_reg(0);
      END IF;
    END IF;
  END PROCESS Delay16_process;

  Delay16_out1 <= Delay16_reg(1);

  Delay17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_reg(0) <= Delay16_out1;
        Delay17_reg(1) <= Delay17_reg(0);
      END IF;
    END IF;
  END PROCESS Delay17_process;

  Delay17_out1 <= Delay17_reg(1);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Delay8_out1;
        Delay4_reg(5 DOWNTO 1) <= Delay4_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(5);

  Delay14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay14_reg(0) <= Delay4_out1;
        Delay14_reg(1) <= Delay14_reg(0);
      END IF;
    END IF;
  END PROCESS Delay14_process;

  Delay14_out1 <= Delay14_reg(1);

  Delay15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay15_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay15_reg(0) <= Delay14_out1;
        Delay15_reg(1) <= Delay15_reg(0);
      END IF;
    END IF;
  END PROCESS Delay15_process;

  Delay15_out1 <= Delay15_reg(1);

  normalizedFreqEst <= std_logic_vector(Data_Type_Conversion3_out1);

  rstCS <= Delay17_out1;

  validOut <= Delay15_out1;

END rtl;

