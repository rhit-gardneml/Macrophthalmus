-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Magnitude_Squared_and_Moving_Sum.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Magnitude_Squared_and_Moving_Sum
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Preamble Detector/Correlator/Magnitude Squared 
-- and Moving Su
-- Hierarchy Level: 4
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Magnitude_Squared_and_Moving_Sum IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        scaled1_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        scaled1_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        E1                                :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
        );
END Magnitude_Squared_and_Moving_Sum;


ARCHITECTURE rtl OF Magnitude_Squared_and_Moving_Sum IS

  -- Signals
  SIGNAL scaled1_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL scaled1_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay6_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En14 [2]
  SIGNAL Delay6_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En14 [2]
  SIGNAL Delay6_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay6_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL conj_cast                        : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL conj_cast_1                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Math_Function1_out1_re           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Math_Function1_out1_im           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En14 [2]
  SIGNAL Delay1_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En14 [2]
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_mul_temp_1              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_mul_temp_2              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_mul_temp_3              : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_out1_re                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_out1_im                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay2_reg_re                    : vector_of_signed32(0 TO 1) := (OTHERS => to_signed(0, 32));  -- sfix32_En28 [2]
  SIGNAL Delay2_reg_im                    : vector_of_signed32(0 TO 1) := (OTHERS => to_signed(0, 32));  -- sfix32_En28 [2]
  SIGNAL Delay2_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay2_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay3_reg                       : vector_of_signed32(0 TO 1) := (OTHERS => to_signed(0, 32));  -- sfix32 [2]
  SIGNAL Delay3_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Gain_mul_temp                    : signed(63 DOWNTO 0);  -- sfix64_En63
  SIGNAL Gain_out1                        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay4_reg                       : vector_of_signed32(0 TO 1) := (OTHERS => to_signed(0, 32));  -- sfix32 [2]
  SIGNAL Delay4_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay12_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay10_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay9_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay8_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay_bypass_delay               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay_reg                        : vector_of_signed32(0 TO 12);  -- sfix32 [13]
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Add1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay14_bypass_delay             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay14_reg                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay14_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay11_reg                      : vector_of_signed32(0 TO 10);  -- sfix32 [11]
  SIGNAL Delay11_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28

BEGIN
  scaled1_re_signed <= signed(scaled1_re);

  scaled1_im_signed <= signed(scaled1_im);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_reg_im(0) <= scaled1_im_signed;
        Delay6_reg_im(1) <= Delay6_reg_im(0);
        Delay6_reg_re(0) <= scaled1_re_signed;
        Delay6_reg_re(1) <= Delay6_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1_re <= Delay6_reg_re(1);
  Delay6_out1_im <= Delay6_reg_im(1);

  Math_Function1_out1_re <= scaled1_re_signed;
  conj_cast <= resize(scaled1_im_signed, 17);
  conj_cast_1 <=  - (conj_cast);
  
  Math_Function1_out1_im <= X"7FFF" WHEN (conj_cast_1(16) = '0') AND (conj_cast_1(15) /= '0') ELSE
      X"8000" WHEN (conj_cast_1(16) = '1') AND (conj_cast_1(15) /= '1') ELSE
      conj_cast_1(15 DOWNTO 0);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg_im(0) <= Math_Function1_out1_im;
        Delay1_reg_im(1) <= Delay1_reg_im(0);
        Delay1_reg_re(0) <= Math_Function1_out1_re;
        Delay1_reg_re(1) <= Delay1_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(1);
  Delay1_out1_im <= Delay1_reg_im(1);

  Product1_mul_temp <= Delay6_out1_re * Delay1_out1_re;
  Product1_mul_temp_1 <= Delay6_out1_im * Delay1_out1_im;
  Product1_out1_re <= Product1_mul_temp - Product1_mul_temp_1;
  Product1_mul_temp_2 <= Delay6_out1_im * Delay1_out1_re;
  Product1_mul_temp_3 <= Delay6_out1_re * Delay1_out1_im;
  Product1_out1_im <= Product1_mul_temp_2 + Product1_mul_temp_3;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg_im(0) <= Product1_out1_im;
        Delay2_reg_im(1) <= Delay2_reg_im(0);
        Delay2_reg_re(0) <= Product1_out1_re;
        Delay2_reg_re(1) <= Delay2_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(1);
  Delay2_out1_im <= Delay2_reg_im(1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Delay2_out1_re;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Gain_mul_temp <= to_signed(1981808640, 32) * Delay3_out1;
  Gain_out1 <= resize(Gain_mul_temp(63 DOWNTO 35), 32);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Gain_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_reg(0) <= validIn;
        Delay12_reg(1) <= Delay12_reg(0);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(1);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_reg(0) <= Delay12_out1;
        Delay10_reg(1) <= Delay10_reg(0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(1);

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_reg(0) <= Delay10_out1;
        Delay9_reg(1) <= Delay9_reg(0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(1);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_reg(0) <= Delay9_out1;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_bypass_delay <= to_signed(0, 32);
      Delay_reg <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Delay8_out1 = '1' THEN
        Delay_bypass_delay <= Delay_reg(12);
        Delay_reg(0) <= Delay4_out1;
        Delay_reg(1 TO 12) <= Delay_reg(0 TO 11);
      END IF;
    END IF;
  END PROCESS Delay_process;

  
  Delay_out1 <= Delay_reg(12) WHEN Delay8_out1 = '1' ELSE
      Delay_bypass_delay;

  Add_out1 <= Delay4_out1 - Delay_out1;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_bypass_delay <= to_signed(0, 32);
      Delay14_reg <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Delay7_out1 = '1' THEN
        Delay14_bypass_delay <= Delay14_reg;
        Delay14_reg <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;

  
  Delay14_out1 <= Delay14_reg WHEN Delay7_out1 = '1' ELSE
      Delay14_bypass_delay;

  Add1_out1 <= Delay5_out1 + Delay14_out1;

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_reg <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_reg(0) <= Add1_out1;
        Delay11_reg(1 TO 10) <= Delay11_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(10);

  E1 <= std_logic_vector(Delay11_out1);

END rtl;

