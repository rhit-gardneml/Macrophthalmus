-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Symbol_Synchronizer.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Symbol_Synchronizer
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Symbol Synchronizer
-- Hierarchy Level: 2
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Symbol_Synchronizer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END Symbol_Synchronizer;


ARCHITECTURE rtl OF Symbol_Synchronizer IS

  -- Component Declarations
  COMPONENT Gardner_TED
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_re                         :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En12
          data_im                         :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En12
          strobe                          :   IN    std_logic;
          e                               :   OUT   std_logic_vector(39 DOWNTO 0)  -- sfix40_En24
          );
  END COMPONENT;

  COMPONENT Loop_Filter_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          e                               :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En24
          v                               :   OUT   std_logic_vector(10 DOWNTO 0)  -- sfix11_En10
          );
  END COMPONENT;

  COMPONENT Interpolation_Control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Delta                           :   IN    std_logic_vector(10 DOWNTO 0);  -- sfix11_En10
          mu                              :   OUT   std_logic_vector(10 DOWNTO 0);  -- sfix11_En10
          Underflow                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Interpolation_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          In_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          mu                              :   IN    std_logic_vector(10 DOWNTO 0);  -- sfix11_En10
          interpolant_re                  :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En12
          interpolant_im                  :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En12
          );
  END COMPONENT;

  COMPONENT Rate_Handle
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          strobe                          :   IN    std_logic;
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Gardner_TED
    USE ENTITY work.Gardner_TED(rtl);

  FOR ALL : Loop_Filter_block1
    USE ENTITY work.Loop_Filter_block1(rtl);

  FOR ALL : Interpolation_Control
    USE ENTITY work.Interpolation_Control(rtl);

  FOR ALL : Interpolation_Filter
    USE ENTITY work.Interpolation_Filter(rtl);

  FOR ALL : Rate_Handle
    USE ENTITY work.Rate_Handle(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Integer_Delay1_out1_re           : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Integer_Delay1_out1_im           : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Underflow                        : std_logic;
  SIGNAL Integer_Delay3_out1              : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(11 DOWNTO 0);  -- ufix1 [12]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay8_out1_im                   : signed(18 DOWNTO 0);  -- sfix19_En12
  SIGNAL Interpolation_Filter_out1_im     : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL Interpolation_Filter_out1_im_signed : signed(18 DOWNTO 0);  -- sfix19_En12
  SIGNAL Interpolation_Filter_out1_re_signed : signed(18 DOWNTO 0);  -- sfix19_En12
  SIGNAL Delay8_out1_re                   : signed(18 DOWNTO 0);  -- sfix19_En12
  SIGNAL Gardner_TED_out1                 : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL Gardner_TED_out1_signed          : signed(39 DOWNTO 0);  -- sfix40_En24
  SIGNAL Delay3_out1                      : signed(39 DOWNTO 0);  -- sfix40_En24
  SIGNAL Loop_Filter_out1                 : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL Loop_Filter_out1_signed          : signed(10 DOWNTO 0);  -- sfix11_En10
  SIGNAL Delay4_out1                      : signed(10 DOWNTO 0);  -- sfix11_En10
  SIGNAL mu                               : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL mu_signed                        : signed(10 DOWNTO 0);  -- sfix11_En10
  SIGNAL Integer_Delay4_out1              : signed(10 DOWNTO 0);  -- sfix11_En10
  SIGNAL Interpolation_Filter_out1_re     : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL Delay1_out1_re                   : signed(18 DOWNTO 0);  -- sfix19_En12
  SIGNAL Delay1_out1_im                   : signed(18 DOWNTO 0);  -- sfix19_En12
  SIGNAL Data_Type_Conversion4_out1_re    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion4_out1_im    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Integer_Delay2_out1              : std_logic;
  SIGNAL Delay7_reg                       : std_logic_vector(11 DOWNTO 0);  -- ufix1 [12]
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Rate_Handle_out1_re              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rate_Handle_out1_im              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Rate_Handle_out2                 : std_logic;

BEGIN
  u_Gardner_TED : Gardner_TED
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              data_re => std_logic_vector(Delay8_out1_re),  -- sfix19_En12
              data_im => std_logic_vector(Delay8_out1_im),  -- sfix19_En12
              strobe => Delay9_out1,
              e => Gardner_TED_out1  -- sfix40_En24
              );

  u_Loop_Filter : Loop_Filter_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              e => std_logic_vector(Delay3_out1),  -- sfix40_En24
              v => Loop_Filter_out1  -- sfix11_En10
              );

  u_Interpolation_Control : Interpolation_Control
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Delta => std_logic_vector(Delay4_out1),  -- sfix11_En10
              mu => mu,  -- sfix11_En10
              Underflow => Underflow
              );

  u_Interpolation_Filter : Interpolation_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_re => std_logic_vector(Integer_Delay1_out1_re),  -- sfix16_En12
              In_im => std_logic_vector(Integer_Delay1_out1_im),  -- sfix16_En12
              mu => std_logic_vector(Integer_Delay4_out1),  -- sfix11_En10
              interpolant_re => Interpolation_Filter_out1_re,  -- sfix19_En12
              interpolant_im => Interpolation_Filter_out1_im  -- sfix19_En12
              );

  u_Rate_Handle : Rate_Handle
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Data_Type_Conversion4_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Data_Type_Conversion4_out1_im),  -- sfix16_En14
              strobe => Delay2_out1,
              validIn => Delay6_out1,
              dataOut_re => Rate_Handle_out1_re,  -- sfix16_En14
              dataOut_im => Rate_Handle_out1_im,  -- sfix16_En14
              validOut => Rate_Handle_out2
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Integer_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay1_out1_re <= to_signed(16#0000#, 16);
      Integer_Delay1_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay1_out1_re <= dataIn_re_signed;
        Integer_Delay1_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Integer_Delay1_process;


  Integer_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay3_out1 <= Underflow;
      END IF;
    END IF;
  END PROCESS Integer_Delay3_process;


  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= Integer_Delay3_out1;
        Delay5_reg(11 DOWNTO 1) <= Delay5_reg(10 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(11);

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_out1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Interpolation_Filter_out1_im_signed <= signed(Interpolation_Filter_out1_im);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1_re <= to_signed(16#00000#, 19);
      Delay8_out1_im <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1_re <= Interpolation_Filter_out1_re_signed;
        Delay8_out1_im <= Interpolation_Filter_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Gardner_TED_out1_signed <= signed(Gardner_TED_out1);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_signed(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Gardner_TED_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Loop_Filter_out1_signed <= signed(Loop_Filter_out1);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Loop_Filter_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  mu_signed <= signed(mu);

  Integer_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay4_out1 <= to_signed(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay4_out1 <= mu_signed;
      END IF;
    END IF;
  END PROCESS Integer_Delay4_process;


  Interpolation_Filter_out1_re_signed <= signed(Interpolation_Filter_out1_re);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_re <= to_signed(16#00000#, 19);
      Delay1_out1_im <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_re <= Interpolation_Filter_out1_re_signed;
        Delay1_out1_im <= Interpolation_Filter_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Data_Type_Conversion4_out1_re <= Delay1_out1_re(13 DOWNTO 0) & '0' & '0';
  Data_Type_Conversion4_out1_im <= Delay1_out1_im(13 DOWNTO 0) & '0' & '0';

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Integer_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integer_Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integer_Delay2_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Integer_Delay2_process;


  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_reg(0) <= Integer_Delay2_out1;
        Delay7_reg(11 DOWNTO 1) <= Delay7_reg(10 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(11);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  dataOut_re <= Rate_Handle_out1_re;

  dataOut_im <= Rate_Handle_out1_im;

  validOut <= Rate_Handle_out2;

END rtl;

