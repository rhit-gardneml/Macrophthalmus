-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\FIFO.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FIFO
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Preamble Detector/FIFO
-- Hierarchy Level: 3
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY FIFO IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        in_re                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        in_im                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        push                              :   IN    std_logic;
        pop                               :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        out_re                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        out_im                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END FIFO;


ARCHITECTURE rtl OF FIFO IS

  -- Component Declarations
  COMPONENT Validate_Input_Push_Pop
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          rst                             :   IN    std_logic;
          push                            :   IN    std_logic;
          pop                             :   IN    std_logic;
          valid_push                      :   OUT   std_logic;
          valid_pop                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din_re                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_din_im                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout_re                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          dout_im                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Validate_Input_Push_Pop
    USE ENTITY work.Validate_Input_Push_Pop(rtl);

  FOR ALL : SimpleDualPortRAM_generic
    USE ENTITY work.SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Validate_Input_Push_Pop_out1     : std_logic;
  SIGNAL Validate_Input_Push_Pop_out2     : std_logic;
  SIGNAL count_step                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_from                       : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_reset                      : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Push_Counter_out1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_2                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_step_1                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_from_1                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_reset_1                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Pop_Counter_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_3                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_4                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL count_5                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Simple_Dual_Port_RAM_out1_re     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Simple_Dual_Port_RAM_out1_im     : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_Validate_Input_Push_Pop : Validate_Input_Push_Pop
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              rst => reset_1,
              push => push,
              pop => pop,
              valid_push => Validate_Input_Push_Pop_out1,
              valid_pop => Validate_Input_Push_Pop_out2
              );

  u_Simple_Dual_Port_RAM : SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 11,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din_re => in_re,
              wr_din_im => in_im,
              wr_addr => std_logic_vector(Push_Counter_out1),
              wr_en => Validate_Input_Push_Pop_out1,
              rd_addr => std_logic_vector(Pop_Counter_out1),
              dout_re => Simple_Dual_Port_RAM_out1_re,
              dout_im => Simple_Dual_Port_RAM_out1_im
              );

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= reset_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1132
  count_step <= to_unsigned(16#001#, 11);

  count_from <= to_unsigned(16#000#, 11);

  count_reset <= to_unsigned(16#000#, 11);

  count <= Push_Counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN Push_Counter_out1 = to_unsigned(16#46C#, 11) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= Push_Counter_out1 WHEN Validate_Input_Push_Pop_out1 = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN Delay1_out1 = '0' ELSE
      count_reset;

  Push_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Push_Counter_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Push_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS Push_Counter_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1132
  count_step_1 <= to_unsigned(16#001#, 11);

  count_from_1 <= to_unsigned(16#000#, 11);

  count_reset_1 <= to_unsigned(16#000#, 11);

  count_3 <= Pop_Counter_out1 + count_step_1;

  
  need_to_wrap_1 <= '1' WHEN Pop_Counter_out1 = to_unsigned(16#46C#, 11) ELSE
      '0';

  
  count_value_1 <= count_3 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  
  count_4 <= Pop_Counter_out1 WHEN Validate_Input_Push_Pop_out2 = '0' ELSE
      count_value_1;

  
  count_5 <= count_4 WHEN Delay1_out1 = '0' ELSE
      count_reset_1;

  Pop_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Pop_Counter_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Pop_Counter_out1 <= count_5;
      END IF;
    END IF;
  END PROCESS Pop_Counter_process;


  out_re <= Simple_Dual_Port_RAM_out1_re;

  out_im <= Simple_Dual_Port_RAM_out1_im;

END rtl;

