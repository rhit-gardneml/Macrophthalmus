-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Quadrant_Correction.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Quadrant_Correction
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Coarse Frequency Compensator/Coarse Frequency 
-- Estimator/Extract Frequency/HDL_CMA_core/Quadrant_Correctio
-- Hierarchy Level: 6
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Quadrant_Correction IS
  PORT( zin                               :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En34
        QA_Control                        :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        zout                              :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En34
        );
END Quadrant_Correction;


ARCHITECTURE rtl OF Quadrant_Correction IS

  -- Signals
  SIGNAL QA_Control_unsigned              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL yZeroXPositive                   : std_logic;  -- ufix1
  SIGNAL yZeroXNegative                   : std_logic;  -- ufix1
  SIGNAL xyNegative                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL AbsRel                           : std_logic;  -- ufix1
  SIGNAL pidivtwo                         : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL zin_signed                       : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL pivdivtwosubout                  : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL mux1out                          : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL Negation_cast                    : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Negation_cast_1                  : signed(35 DOWNTO 0);  -- sfix36_En34
  SIGNAL Negation_cast_2                  : signed(36 DOWNTO 0);  -- sfix37_En34
  SIGNAL mux1out_negate                   : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL pionepos                         : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL pi_subtraction                   : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL pioneneg                         : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL negpi_addition                   : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL mux2out                          : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL mux5out                          : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL zero                             : signed(34 DOWNTO 0);  -- sfix35_En34
  SIGNAL mux6out                          : signed(34 DOWNTO 0);  -- sfix35_En34

BEGIN
  QA_Control_unsigned <= unsigned(QA_Control);

  yZeroXPositive <= QA_Control_unsigned(4);

  yZeroXNegative <= QA_Control_unsigned(3);

  xyNegative <= QA_Control_unsigned(1 DOWNTO 0);

  AbsRel <= QA_Control_unsigned(2);

  pidivtwo <= signed'("01000000000000000000000000000000000");

  zin_signed <= signed(zin);

  pivdivtwosubout <= pidivtwo - zin_signed;

  
  mux1out <= pivdivtwosubout WHEN AbsRel = '0' ELSE
      zin_signed;

  Negation_cast <= resize(mux1out, 36);
  Negation_cast_1 <=  - (Negation_cast);
  Negation_cast_2 <= resize(Negation_cast_1, 37);
  mux1out_negate <= Negation_cast_2(34 DOWNTO 0);

  pionepos <= signed'("01111111111111111111111111111111111");

  pi_subtraction <= pionepos - mux1out;

  pioneneg <= signed'("10000000000000000000000000000000000");

  negpi_addition <= pioneneg + mux1out;

  
  mux2out <= mux1out WHEN xyNegative = to_unsigned(16#0#, 2) ELSE
      mux1out_negate WHEN xyNegative = to_unsigned(16#1#, 2) ELSE
      pi_subtraction WHEN xyNegative = to_unsigned(16#2#, 2) ELSE
      negpi_addition;

  
  mux5out <= mux2out WHEN yZeroXNegative = '0' ELSE
      pionepos;

  zero <= to_signed(0, 35);

  
  mux6out <= mux5out WHEN yZeroXPositive = '0' ELSE
      zero;

  zout <= std_logic_vector(mux6out);

END rtl;

