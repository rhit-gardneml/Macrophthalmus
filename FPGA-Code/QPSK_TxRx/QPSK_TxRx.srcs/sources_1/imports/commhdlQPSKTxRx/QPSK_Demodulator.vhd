-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\QPSK_Demodulator.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: QPSK_Demodulator
-- Source Path: commhdlQPSKTxRx/QPSK Rx/QPSK Demodulator
-- Hierarchy Level: 1
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY QPSK_Demodulator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        startIn                           :   IN    std_logic;
        endIn                             :   IN    std_logic;
        validIn                           :   IN    std_logic;
        dataOut                           :   OUT   std_logic;
        startOut                          :   OUT   std_logic;
        endOut                            :   OUT   std_logic;
        validOut                          :   OUT   std_logic
        );
END QPSK_Demodulator;


ARCHITECTURE rtl OF QPSK_Demodulator IS

  -- Component Declarations
  COMPONENT QPSK_Demodulator_Baseband
    PORT( in0_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          in0_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          out0                            :   OUT   std_logic_vector(1 DOWNTO 0)  -- boolean [2]
          );
  END COMPONENT;

  COMPONENT Serializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          In2                             :   IN    std_logic;
          Out1                            :   OUT   std_logic;
          Out2                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : QPSK_Demodulator_Baseband
    USE ENTITY work.QPSK_Demodulator_Baseband(rtl);

  FOR ALL : Serializer
    USE ENTITY work.Serializer(rtl);

  -- Signals
  SIGNAL dataOut_re                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataOut_im                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL QPSK_Demodulator_Baseband_out1   : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Delay12_out1                     : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Serializer_out1                  : std_logic;
  SIGNAL Serializer_out2                  : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Delay9_out1                      : std_logic;

BEGIN
  u_QPSK_Demodulator_Baseband : QPSK_Demodulator_Baseband
    PORT MAP( in0_re => std_logic_vector(Delay_out1_re),  -- sfix16_En14
              in0_im => std_logic_vector(Delay_out1_im),  -- sfix16_En14
              out0 => QPSK_Demodulator_Baseband_out1  -- boolean [2]
              );

  u_Serializer : Serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              u => Delay12_out1,  -- boolean [2]
              In2 => Delay5_out1,
              Out1 => Serializer_out1,
              Out2 => Serializer_out2
              );

  dataOut_re <= signed(dataIn_re);

  dataOut_im <= signed(dataIn_im);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_re <= to_signed(16#0000#, 16);
      Delay_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_re <= dataOut_re;
        Delay_out1_im <= dataOut_im;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_out1 <= QPSK_Demodulator_Baseband_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1 <= Serializer_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= startIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Delay6_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_out1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= endIn;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_out1 <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay13_out1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1 <= Delay13_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_out1 <= Serializer_out2;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  dataOut <= Delay8_out1;

  startOut <= Delay10_out1;

  endOut <= Delay11_out1;

  validOut <= Delay9_out1;

END rtl;

