-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Preamble_Detector.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Preamble_Detector
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Preamble Detector
-- Hierarchy Level: 2
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Preamble_Detector IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        syncPulse                         :   OUT   std_logic;
        validOut                          :   OUT   std_logic
        );
END Preamble_Detector;


ARCHITECTURE rtl OF Preamble_Detector IS

  -- Component Declarations
  COMPONENT Correlator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En26
          threshold                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Peak_Search
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          corr                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En26
          thresholdExceeded               :   IN    std_logic;
          validIn                         :   IN    std_logic;
          timingOffset                    :   OUT   std_logic_vector(10 DOWNTO 0);  -- ufix11
          done                            :   OUT   std_logic;
          success                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT FIFO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          in_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          push                            :   IN    std_logic;
          pop                             :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          out_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          out_im                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Timing_Adjust
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          timingOffset                    :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          timingOffsetValid               :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic;
          SyncPulse                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Correlator
    USE ENTITY work.Correlator(rtl);

  FOR ALL : Peak_Search
    USE ENTITY work.Peak_Search(rtl);

  FOR ALL : FIFO
    USE ENTITY work.FIFO(rtl);

  FOR ALL : Timing_Adjust
    USE ENTITY work.Timing_Adjust(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Correlator_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Correlator_out2                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Correlator_out3                  : std_logic;
  SIGNAL Correlator_out1_signed           : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL Correlator_out2_signed           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Relational_Operator_1_cast       : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Relational_Operator_1_cast_1     : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Peak_Search_out1                 : std_logic_vector(10 DOWNTO 0);  -- ufix11
  SIGNAL done                             : std_logic;
  SIGNAL success                          : std_logic;
  SIGNAL Peak_Search_out1_unsigned        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Delay11_out1                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay_reg_re                     : vector_of_signed16(0 TO 19);  -- sfix16_En14 [20]
  SIGNAL Delay_reg_im                     : vector_of_signed16(0 TO 19);  -- sfix16_En14 [20]
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay6_reg_re                    : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL Delay6_reg_im                    : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL Delay6_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay6_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay7_reg                       : std_logic_vector(19 DOWNTO 0);  -- ufix1 [20]
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay8_reg                       : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay10_reg                      : std_logic_vector(4531 DOWNTO 0);  -- ufix1 [4532]
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL FIFO_out1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL FIFO_out1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL FIFO_out1_re_signed              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL FIFO_out1_im_signed              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay13_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay13_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL synchronizedData_re              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL synchronizedData_im              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL synchronizedValid                : std_logic;
  SIGNAL synchronizedPulse                : std_logic;
  SIGNAL synchronizedData_re_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL synchronizedData_im_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;

BEGIN
  u_Correlator : Correlator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Delay1_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay1_out1_im),  -- sfix16_En14
              validIn => Delay2_out1,
              dataOut => Correlator_out1,  -- sfix32_En26
              threshold => Correlator_out2,  -- sfix32_En28
              validOut => Correlator_out3
              );

  u_Peak_Search : Peak_Search
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              corr => Correlator_out1,  -- sfix32_En26
              thresholdExceeded => Relational_Operator_relop1,
              validIn => Correlator_out3,
              timingOffset => Peak_Search_out1,  -- ufix11
              done => done,
              success => success
              );

  u_FIFO : FIFO
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in_re => std_logic_vector(Delay6_out1_re),  -- sfix16_En14
              in_im => std_logic_vector(Delay6_out1_im),  -- sfix16_En14
              push => Delay8_out1,
              pop => Delay10_out1,
              reset_1 => Constant_out1,
              out_re => FIFO_out1_re,  -- sfix16_En14
              out_im => FIFO_out1_im  -- sfix16_En14
              );

  u_Timing_Adjust : Timing_Adjust
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              timingOffset => std_logic_vector(Delay11_out1),  -- ufix11
              timingOffsetValid => Delay12_out1,
              dataIn_re => std_logic_vector(Delay13_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay13_out1_im),  -- sfix16_En14
              validIn => Delay14_out1,
              dataOut_re => synchronizedData_re,  -- sfix16_En14
              dataOut_im => synchronizedData_im,  -- sfix16_En14
              validOut => synchronizedValid,
              SyncPulse => synchronizedPulse
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_re <= to_signed(16#0000#, 16);
      Delay1_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_re <= dataIn_re_signed;
        Delay1_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Correlator_out1_signed <= signed(Correlator_out1);

  Correlator_out2_signed <= signed(Correlator_out2);

  Relational_Operator_1_cast <= Correlator_out1_signed & '0' & '0';
  Relational_Operator_1_cast_1 <= resize(Correlator_out2_signed, 34);
  
  Relational_Operator_relop1 <= '1' WHEN Relational_Operator_1_cast > Relational_Operator_1_cast_1 ELSE
      '0';

  Peak_Search_out1_unsigned <= unsigned(Peak_Search_out1);

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1 <= Peak_Search_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Logical_Operator_out1 <= done AND success;

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_out1 <= Logical_Operator_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg_im(0) <= Delay1_out1_im;
        Delay_reg_im(1 TO 19) <= Delay_reg_im(0 TO 18);
        Delay_reg_re(0) <= Delay1_out1_re;
        Delay_reg_re(1 TO 19) <= Delay_reg_re(0 TO 18);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1_re <= Delay_reg_re(19);
  Delay_out1_im <= Delay_reg_im(19);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay6_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_reg_im(0) <= Delay_out1_im;
        Delay6_reg_im(1 TO 5) <= Delay6_reg_im(0 TO 4);
        Delay6_reg_re(0) <= Delay_out1_re;
        Delay6_reg_re(1 TO 5) <= Delay6_reg_re(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1_re <= Delay6_reg_re(5);
  Delay6_out1_im <= Delay6_reg_im(5);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_reg(0) <= Delay2_out1;
        Delay7_reg(19 DOWNTO 1) <= Delay7_reg(18 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(19);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_reg(0) <= Delay7_out1;
        Delay8_reg(5 DOWNTO 1) <= Delay8_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(5);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_reg(0) <= Delay8_out1;
        Delay10_reg(4531 DOWNTO 1) <= Delay10_reg(4530 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(4531);

  Constant_out1 <= '0';

  FIFO_out1_re_signed <= signed(FIFO_out1_re);

  FIFO_out1_im_signed <= signed(FIFO_out1_im);

  Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_out1_re <= to_signed(16#0000#, 16);
      Delay13_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay13_out1_re <= FIFO_out1_re_signed;
        Delay13_out1_im <= FIFO_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  Delay14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay14_out1 <= Delay10_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  synchronizedData_re_signed <= signed(synchronizedData_re);

  synchronizedData_im_signed <= signed(synchronizedData_im);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_re <= to_signed(16#0000#, 16);
      Delay3_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1_re <= synchronizedData_re_signed;
        Delay3_out1_im <= synchronizedData_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  dataOut_re <= std_logic_vector(Delay3_out1_re);

  dataOut_im <= std_logic_vector(Delay3_out1_im);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= synchronizedPulse;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= synchronizedValid;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  syncPulse <= Delay4_out1;

  validOut <= Delay5_out1;

END rtl;

