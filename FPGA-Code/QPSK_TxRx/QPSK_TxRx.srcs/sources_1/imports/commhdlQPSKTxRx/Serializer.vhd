-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Serializer.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Serializer
-- Source Path: commhdlQPSKTxRx/QPSK Rx/QPSK Demodulator/Serializer
-- Hierarchy Level: 2
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Serializer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        u                                 :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        In2                               :   IN    std_logic;
        Out1                              :   OUT   std_logic;
        Out2                              :   OUT   std_logic
        );
END Serializer;


ARCHITECTURE rtl OF Serializer IS

  -- Signals
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL count_step                       : std_logic;  -- ufix1
  SIGNAL count_from                       : std_logic;  -- ufix1
  SIGNAL HDL_Counter_out1                 : std_logic;  -- ufix1
  SIGNAL count                            : std_logic;  -- ufix1
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : std_logic;  -- ufix1
  SIGNAL count_1                          : std_logic;  -- ufix1
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_0 : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_1 : std_logic;
  SIGNAL Multiport_Switch_out1            : std_logic;

BEGIN
  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= In2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator_out1 <= Delay1_out1 OR Delay4_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  count_step <= '1';

  count_from <= '0';

  count <= HDL_Counter_out1 XOR count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = '1' ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN Logical_Operator_out1 = '0' ELSE
      count_value;

  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Unit_Delay_Enabled_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous_out1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND In2 = '1' THEN
        Unit_Delay_Enabled_Synchronous_out1 <= u;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_process;


  Unit_Delay_Enabled_Synchronous_out1_0 <= Unit_Delay_Enabled_Synchronous_out1(0);

  Unit_Delay_Enabled_Synchronous_out1_1 <= Unit_Delay_Enabled_Synchronous_out1(1);

  
  Multiport_Switch_out1 <= Unit_Delay_Enabled_Synchronous_out1_0 WHEN HDL_Counter_out1 = '0' ELSE
      Unit_Delay_Enabled_Synchronous_out1_1;

  Out1 <= Multiport_Switch_out1;

  Out2 <= Logical_Operator_out1;

END rtl;

