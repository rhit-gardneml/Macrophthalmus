-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Data_Bits_FIFO.vhd
-- Created: 2024-01-25 16:27:39
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Data_Bits_FIFO
-- Source Path: commhdlQPSKTxRx/QPSK Tx/Bit Packetizer/Data Bits FIFO
-- Hierarchy Level: 2
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Data_Bits_FIFO IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    std_logic;
        push                              :   IN    std_logic;
        dataOut                           :   OUT   std_logic;
        activeFrame                       :   OUT   std_logic;
        sampleCount                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        sampleCountValid                  :   OUT   std_logic;
        fullRAM                           :   OUT   std_logic
        );
END Data_Bits_FIFO;


ARCHITECTURE rtl OF Data_Bits_FIFO IS

  -- Component Declarations
  COMPONENT Compare_To_Constant5
    PORT( u                               :   IN    std_logic;  -- ufix1
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RAM_Frame_Status_Indicator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          push                            :   IN    std_logic;
          pop                             :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT SimpleDualPortRAM_singlebit
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic;
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT MATLAB_Function1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr                              :   IN    std_logic;
          rd                              :   IN    std_logic;
          full                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Compare_To_Constant5
    USE ENTITY work.Compare_To_Constant5(rtl);

  FOR ALL : RAM_Frame_Status_Indicator
    USE ENTITY work.RAM_Frame_Status_Indicator(rtl);

  FOR ALL : SimpleDualPortRAM_singlebit
    USE ENTITY work.SimpleDualPortRAM_singlebit(rtl);

  FOR ALL : MATLAB_Function1
    USE ENTITY work.MATLAB_Function1(rtl);

  -- Signals
  SIGNAL count_step                       : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL count_from                       : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL HDL_Counter_out1                 : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL count                            : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL count_1                          : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL count_step_1                     : std_logic;  -- ufix1
  SIGNAL count_from_1                     : std_logic;  -- ufix1
  SIGNAL HDL_Counter3_out1                : std_logic;  -- ufix1
  SIGNAL count_2                          : std_logic;  -- ufix1
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : std_logic;  -- ufix1
  SIGNAL count_3                          : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant5_out1        : std_logic;
  SIGNAL count_step_2                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_from_2                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL HDL_Counter2_out1                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_4                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL need_to_wrap_2                   : std_logic;
  SIGNAL count_value_2                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_5                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay3_out1                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL out_rsvd                         : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL out_unsigned                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1 : std_logic;
  SIGNAL count_step_3                     : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL count_from_3                     : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL HDL_Counter1_out1                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL count_6                          : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL need_to_wrap_3                   : std_logic;
  SIGNAL count_value_3                    : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL count_7                          : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Simple_Dual_Port_RAM_out1        : std_logic;
  SIGNAL Delay2_out1                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay5_out1                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL full                             : std_logic;
  SIGNAL Delay7_out1                      : std_logic;

BEGIN
  u_Compare_To_Constant5 : Compare_To_Constant5
    PORT MAP( u => HDL_Counter3_out1,  -- ufix1
              y => Compare_To_Constant5_out1
              );

  u_RAM_Frame_Status_Indicator : RAM_Frame_Status_Indicator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              push => push,
              pop => Logical_Operator_out1,
              out_rsvd => out_rsvd  -- ufix2
              );

  u_Simple_Dual_Port_RAM : SimpleDualPortRAM_singlebit
    GENERIC MAP( AddrWidth => 13,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => data,
              wr_addr => std_logic_vector(HDL_Counter_out1),
              wr_en => push,
              rd_addr => std_logic_vector(HDL_Counter1_out1),
              dout => Simple_Dual_Port_RAM_out1
              );

  u_MATLAB_Function1 : MATLAB_Function1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              wr => push,
              rd => Logical_Operator_out1,
              full => full
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4479
  count_step <= to_unsigned(16#0001#, 13);

  count_from <= to_unsigned(16#0000#, 13);

  count <= HDL_Counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#117F#, 13) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN push = '0' ELSE
      count_value;

  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Constant_out1 <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  count_step_1 <= '1';

  count_from_1 <= '0';

  count_2 <= HDL_Counter3_out1 XOR count_step_1;

  
  need_to_wrap_1 <= '1' WHEN HDL_Counter3_out1 = '1' ELSE
      '0';

  
  count_value_1 <= count_2 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  
  count_3 <= HDL_Counter3_out1 WHEN Constant_out1 = '0' ELSE
      count_value_1;

  HDL_Counter3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter3_out1 <= count_3;
      END IF;
    END IF;
  END PROCESS HDL_Counter3_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2265
  count_step_2 <= to_unsigned(16#001#, 12);

  count_from_2 <= to_unsigned(16#000#, 12);

  count_4 <= HDL_Counter2_out1 + count_step_2;

  
  need_to_wrap_2 <= '1' WHEN HDL_Counter2_out1 = to_unsigned(16#8D9#, 12) ELSE
      '0';

  
  count_value_2 <= count_4 WHEN need_to_wrap_2 = '0' ELSE
      count_from_2;

  
  count_5 <= HDL_Counter2_out1 WHEN Compare_To_Constant5_out1 = '0' ELSE
      count_value_2;

  HDL_Counter2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter2_out1 <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter2_out1 <= count_5;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  
  Compare_To_Constant3_out1 <= '1' WHEN HDL_Counter2_out1 = to_unsigned(16#000#, 12) ELSE
      '0';

  
  Compare_To_Constant_out1 <= '1' WHEN HDL_Counter2_out1 >= to_unsigned(16#01A#, 12) ELSE
      '0';

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Compare_To_Constant_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Compare_To_Constant5_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN Delay3_out1 /= to_unsigned(16#0#, 2) ELSE
      '0';

  out_unsigned <= unsigned(out_rsvd);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= out_unsigned;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Compare_To_Constant1_out1 <= '1' WHEN Delay3_out1 = to_unsigned(16#0#, 2) ELSE
      '0';

  Unit_Delay_Enabled_Resettable_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable_Synchronous_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Compare_To_Constant1_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= '0';
        ELSIF Compare_To_Constant3_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= Compare_To_Constant2_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous_process;


  Logical_Operator_out1 <= Delay4_out1 AND (Unit_Delay_Enabled_Resettable_Synchronous_out1 AND Delay1_out1);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4479
  count_step_3 <= to_unsigned(16#0001#, 13);

  count_from_3 <= to_unsigned(16#0000#, 13);

  count_6 <= HDL_Counter1_out1 + count_step_3;

  
  need_to_wrap_3 <= '1' WHEN HDL_Counter1_out1 = to_unsigned(16#117F#, 13) ELSE
      '0';

  
  count_value_3 <= count_6 WHEN need_to_wrap_3 = '0' ELSE
      count_from_3;

  
  count_7 <= HDL_Counter1_out1 WHEN Logical_Operator_out1 = '0' ELSE
      count_value_3;

  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#0000#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter1_out1 <= count_7;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= HDL_Counter2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1 <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Compare_To_Constant4_out1 <= '1' WHEN Delay5_out1 = to_unsigned(16#8D9#, 12) ELSE
      '0';

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Logical_Operator1_out1 <= Delay6_out1 AND (Compare_To_Constant2_out1 AND Compare_To_Constant4_out1);

  sampleCount <= std_logic_vector(Delay5_out1);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_out1 <= full;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  dataOut <= Simple_Dual_Port_RAM_out1;

  activeFrame <= Logical_Operator1_out1;

  sampleCountValid <= Delay6_out1;

  fullRAM <= Delay7_out1;

END rtl;

