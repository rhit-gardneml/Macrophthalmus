-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Raise_Power_to_4.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Raise_Power_to_4
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Coarse Frequency Compensator/Raise Power 
-- to 
-- Hierarchy Level: 3
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Raise_Power_to_4 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        validOut                          :   OUT   std_logic
        );
END Raise_Power_to_4;


ARCHITECTURE rtl OF Raise_Power_to_4 IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay3_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay3_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay4_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_sub_cast                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product1_mul_temp_1              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_sub_cast_1              : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product1_mul_temp_2              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_add_cast                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product1_mul_temp_3              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_add_cast_1              : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product1_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product1_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay1_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay1_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay9_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay9_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay6_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay6_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay6_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay6_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay7_reg_re                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay7_reg_im                    : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay7_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay7_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product2_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_sub_cast                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product2_mul_temp_1              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_sub_cast_1              : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product2_mul_temp_2              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_add_cast                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product2_mul_temp_3              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_add_cast_1              : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product2_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product2_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay11_reg_re                   : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay11_reg_im                   : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16_En12 [2]
  SIGNAL Delay11_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay11_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay5_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay8_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay12_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay12_out1                     : std_logic;

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg_im(0) <= dataIn_im_signed;
        Delay3_reg_im(1) <= Delay3_reg_im(0);
        Delay3_reg_re(0) <= dataIn_re_signed;
        Delay3_reg_re(1) <= Delay3_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1_re <= Delay3_reg_re(1);
  Delay3_out1_im <= Delay3_reg_im(1);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg_im(0) <= dataIn_im_signed;
        Delay4_reg_im(1) <= Delay4_reg_im(0);
        Delay4_reg_re(0) <= dataIn_re_signed;
        Delay4_reg_re(1) <= Delay4_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(1);
  Delay4_out1_im <= Delay4_reg_im(1);

  Product1_mul_temp <= Delay3_out1_re * Delay4_out1_re;
  Product1_sub_cast <= Product1_mul_temp(27 DOWNTO 12);
  Product1_mul_temp_1 <= Delay3_out1_im * Delay4_out1_im;
  Product1_sub_cast_1 <= Product1_mul_temp_1(27 DOWNTO 12);
  Product1_out1_re <= Product1_sub_cast - Product1_sub_cast_1;
  Product1_mul_temp_2 <= Delay3_out1_im * Delay4_out1_re;
  Product1_add_cast <= Product1_mul_temp_2(27 DOWNTO 12);
  Product1_mul_temp_3 <= Delay3_out1_re * Delay4_out1_im;
  Product1_add_cast_1 <= Product1_mul_temp_3(27 DOWNTO 12);
  Product1_out1_im <= Product1_add_cast + Product1_add_cast_1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg_im(0) <= Product1_out1_im;
        Delay1_reg_im(1) <= Delay1_reg_im(0);
        Delay1_reg_re(0) <= Product1_out1_re;
        Delay1_reg_re(1) <= Delay1_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(1);
  Delay1_out1_im <= Delay1_reg_im(1);

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1_re <= to_signed(16#0000#, 16);
      Delay9_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_out1_re <= Delay1_out1_re;
        Delay9_out1_im <= Delay1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_reg_im(0) <= Delay9_out1_im;
        Delay6_reg_im(1) <= Delay6_reg_im(0);
        Delay6_reg_re(0) <= Delay9_out1_re;
        Delay6_reg_re(1) <= Delay6_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1_re <= Delay6_reg_re(1);
  Delay6_out1_im <= Delay6_reg_im(1);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_reg_im(0) <= Delay9_out1_im;
        Delay7_reg_im(1) <= Delay7_reg_im(0);
        Delay7_reg_re(0) <= Delay9_out1_re;
        Delay7_reg_re(1) <= Delay7_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1_re <= Delay7_reg_re(1);
  Delay7_out1_im <= Delay7_reg_im(1);

  Product2_mul_temp <= Delay6_out1_re * Delay7_out1_re;
  Product2_sub_cast <= Product2_mul_temp(27 DOWNTO 12);
  Product2_mul_temp_1 <= Delay6_out1_im * Delay7_out1_im;
  Product2_sub_cast_1 <= Product2_mul_temp_1(27 DOWNTO 12);
  Product2_out1_re <= Product2_sub_cast - Product2_sub_cast_1;
  Product2_mul_temp_2 <= Delay6_out1_im * Delay7_out1_re;
  Product2_add_cast <= Product2_mul_temp_2(27 DOWNTO 12);
  Product2_mul_temp_3 <= Delay6_out1_re * Delay7_out1_im;
  Product2_add_cast_1 <= Product2_mul_temp_3(27 DOWNTO 12);
  Product2_out1_im <= Product2_add_cast + Product2_add_cast_1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_reg_im(0) <= Product2_out1_im;
        Delay11_reg_im(1) <= Delay11_reg_im(0);
        Delay11_reg_re(0) <= Product2_out1_re;
        Delay11_reg_re(1) <= Delay11_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1_re <= Delay11_reg_re(1);
  Delay11_out1_im <= Delay11_reg_im(1);

  dataOut_re <= std_logic_vector(Delay11_out1_re);

  dataOut_im <= std_logic_vector(Delay11_out1_im);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= validIn;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Delay5_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_reg(0) <= Delay10_out1;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_reg(0) <= Delay8_out1;
        Delay12_reg(1) <= Delay12_reg(0);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(1);

  validOut <= Delay12_out1;

END rtl;

