-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Direct_Digital_Synthesis.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Direct_Digital_Synthesis
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Carrier Synchronizer/Direct Digital Synthesis
-- Hierarchy Level: 3
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Direct_Digital_Synthesis IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        rst                               :   IN    std_logic;
        validIn                           :   IN    std_logic;
        phaseInc                          :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En39
        expOut_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        expOut_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END Direct_Digital_Synthesis;


ARCHITECTURE rtl OF Direct_Digital_Synthesis IS

  -- Component Declarations
  COMPONENT NCO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          inc                             :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21
          resetPhase                      :   IN    std_logic;
          validIn                         :   IN    std_logic;
          complexexp_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          complexexp_im                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : NCO
    USE ENTITY work.NCO(rtl);

  -- Signals
  SIGNAL phaseInc_signed                  : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Delay_out1                       : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Data_Type_Conversion_out1        : signed(20 DOWNTO 0);  -- sfix21_En21
  SIGNAL Data_Type_Conversion1_out1       : signed(20 DOWNTO 0);  -- sfix21
  SIGNAL NCO_out1_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out1_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_NCO : NCO
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              inc => std_logic_vector(Data_Type_Conversion1_out1),  -- sfix21
              resetPhase => rst,
              validIn => validIn,
              complexexp_re => NCO_out1_re,  -- sfix16_En14
              complexexp_im => NCO_out1_im  -- sfix16_En14
              );

  phaseInc_signed <= signed(phaseInc);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= phaseInc_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Data_Type_Conversion_out1 <= Delay_out1(38 DOWNTO 18);

  Data_Type_Conversion1_out1 <= Data_Type_Conversion_out1;

  expOut_re <= NCO_out1_re;

  expOut_im <= NCO_out1_im;

END rtl;

