-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Packet_Controller.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Packet_Controller
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Packet Controller
-- Hierarchy Level: 2
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Packet_Controller IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        syncPulse                         :   IN    std_logic;
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        startOut                          :   OUT   std_logic;
        endOut                            :   OUT   std_logic;
        validOut                          :   OUT   std_logic
        );
END Packet_Controller;


ARCHITECTURE rtl OF Packet_Controller IS

  -- Component Declarations
  COMPONENT MATLAB_Function
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          valid                           :   IN    std_logic;
          syncPulse                       :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT End_Generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          rst                             :   IN    std_logic;
          endOut                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT sample_discard_controller
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          startIn                         :   IN    std_logic;
          endIn                           :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          startOut                        :   OUT   std_logic;
          endOut                          :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : MATLAB_Function
    USE ENTITY work.MATLAB_Function(rtl);

  FOR ALL : End_Generator
    USE ENTITY work.End_Generator(rtl);

  FOR ALL : sample_discard_controller
    USE ENTITY work.sample_discard_controller(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_reg_re                     : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Delay_reg_im                     : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_reg                       : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL out_rsvd                         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL End_Generator_out1               : std_logic;
  SIGNAL dataOut_re_tmp                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_im_tmp                   : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_MATLAB_Function : MATLAB_Function
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              valid => validIn,
              syncPulse => syncPulse,
              out_rsvd => out_rsvd
              );

  u_End_Generator : End_Generator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              validIn => Delay1_out1,
              rst => Logical_Operator_out1,
              endOut => End_Generator_out1
              );

  u_sample_discard_controller : sample_discard_controller
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Delay_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay_out1_im),  -- sfix16_En14
              validIn => Delay1_out1,
              startIn => Delay2_out1,
              endIn => End_Generator_out1,
              dataOut_re => dataOut_re_tmp,  -- sfix16_En14
              dataOut_im => dataOut_im_tmp,  -- sfix16_En14
              startOut => startOut,
              endOut => endOut,
              validOut => validOut
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg_im(0) <= dataIn_im_signed;
        Delay_reg_im(1 TO 3) <= Delay_reg_im(0 TO 2);
        Delay_reg_re(0) <= dataIn_re_signed;
        Delay_reg_re(1 TO 3) <= Delay_reg_re(0 TO 2);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1_re <= Delay_reg_re(3);
  Delay_out1_im <= Delay_reg_im(3);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg(0) <= validIn;
        Delay1_reg(3 DOWNTO 1) <= Delay1_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(3);

  Logical_Operator_out1 <= validIn AND out_rsvd;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Logical_Operator_out1;
        Delay2_reg(3 DOWNTO 1) <= Delay2_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(3);

  dataOut_re <= dataOut_re_tmp;

  dataOut_im <= dataOut_im_tmp;

END rtl;

