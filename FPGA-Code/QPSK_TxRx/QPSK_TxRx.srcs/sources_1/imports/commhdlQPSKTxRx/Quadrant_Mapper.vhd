-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Quadrant_Mapper.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Quadrant_Mapper
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Coarse Frequency Compensator/Coarse Frequency 
-- Estimator/Extract Frequency/HDL_CMA_core/Quadrant_Mappe
-- Hierarchy Level: 6
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Quadrant_Mapper IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        xin                               :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En24
        yin                               :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En24
        xout                              :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En24
        yout                              :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En24
        QA_Control                        :   OUT   std_logic_vector(4 DOWNTO 0)  -- ufix5
        );
END Quadrant_Mapper;


ARCHITECTURE rtl OF Quadrant_Mapper IS

  -- Signals
  SIGNAL xin_signed                       : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL abs_rsvd_y                       : signed(33 DOWNTO 0);  -- sfix34_En24
  SIGNAL abs_rsvd_cast                    : signed(33 DOWNTO 0);  -- sfix34_En24
  SIGNAL xAbs                             : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL xAbsReg                          : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL yin_signed                       : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL abs_rsvd_y_1                     : signed(33 DOWNTO 0);  -- sfix34_En24
  SIGNAL abs_rsvd_cast_1                  : signed(33 DOWNTO 0);  -- sfix34_En24
  SIGNAL yAbs                             : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL yAbsReg                          : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL relop_relop1                     : std_logic;
  SIGNAL xout_1                           : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL yout_1                           : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL in2reg                           : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL yZero                            : std_logic;  -- ufix1
  SIGNAL in1reg                           : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL xPositive                        : std_logic;  -- ufix1
  SIGNAL yZeroXPositive                   : std_logic;  -- ufix1
  SIGNAL xNegative                        : std_logic;  -- ufix1
  SIGNAL yZeroXNegative                   : std_logic;  -- ufix1
  SIGNAL yNegative                        : std_logic;  -- ufix1
  SIGNAL qcControl                        : unsigned(4 DOWNTO 0);  -- ufix5

BEGIN
  xin_signed <= signed(xin);

  abs_rsvd_cast <= resize(xin_signed, 34);
  
  abs_rsvd_y <=  - (abs_rsvd_cast) WHEN xin_signed < to_signed(0, 33) ELSE
      resize(xin_signed, 34);
  xAbs <= abs_rsvd_y(32 DOWNTO 0);

  DelayxAbs_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xAbsReg <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xAbsReg <= xAbs;
      END IF;
    END IF;
  END PROCESS DelayxAbs_process;


  yin_signed <= signed(yin);

  abs_rsvd_cast_1 <= resize(yin_signed, 34);
  
  abs_rsvd_y_1 <=  - (abs_rsvd_cast_1) WHEN yin_signed < to_signed(0, 33) ELSE
      resize(yin_signed, 34);
  yAbs <= abs_rsvd_y_1(32 DOWNTO 0);

  DelayyAbs_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yAbsReg <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yAbsReg <= yAbs;
      END IF;
    END IF;
  END PROCESS DelayyAbs_process;


  
  relop_relop1 <= '1' WHEN xAbsReg > yAbsReg ELSE
      '0';

  
  xout_1 <= yAbsReg WHEN relop_relop1 = '0' ELSE
      xAbsReg;

  xout <= std_logic_vector(xout_1);

  
  yout_1 <= xAbsReg WHEN relop_relop1 = '0' ELSE
      yAbsReg;

  yout <= std_logic_vector(yout_1);

  Delayin2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in2reg <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in2reg <= yin_signed;
      END IF;
    END IF;
  END PROCESS Delayin2_process;


  
  yZero <= '1' WHEN in2reg = to_signed(0, 33) ELSE
      '0';

  Delayin1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in1reg <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in1reg <= xin_signed;
      END IF;
    END IF;
  END PROCESS Delayin1_process;


  
  xPositive <= '1' WHEN in1reg >= to_signed(0, 33) ELSE
      '0';

  yZeroXPositive <= yZero AND xPositive;

  
  xNegative <= '1' WHEN in1reg < to_signed(0, 33) ELSE
      '0';

  yZeroXNegative <= yZero AND xNegative;

  
  yNegative <= '1' WHEN in2reg < to_signed(0, 33) ELSE
      '0';

  qcControl <= unsigned'(yZeroXPositive & yZeroXNegative & relop_relop1 & xNegative & yNegative);

  QA_Control <= std_logic_vector(qcControl);

END rtl;

