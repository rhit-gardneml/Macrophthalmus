-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Loop_Filter_block.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Loop_Filter_block
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Carrier Synchronizer/Loop Filter
-- Hierarchy Level: 3
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Loop_Filter_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        e                                 :   IN    std_logic_vector(12 DOWNTO 0);  -- sfix13_En10
        validIn                           :   IN    std_logic;
        internalRst                       :   IN    std_logic;
        externalRst                       :   IN    std_logic;
        v                                 :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En39
        valid                             :   OUT   std_logic;
        rst                               :   OUT   std_logic
        );
END Loop_Filter_block;


ARCHITECTURE rtl OF Loop_Filter_block IS

  -- Signals
  SIGNAL Delay8_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay9_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay10_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL e_signed                         : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Delay7_reg                       : vector_of_signed13(0 TO 1);  -- sfix13 [2]
  SIGNAL Delay7_out1                      : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Gain1_mul_temp                   : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL Gain1_out1                       : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL Delay6_reg                       : vector_of_signed29(0 TO 1);  -- sfix29 [2]
  SIGNAL Delay6_out1                      : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL Data_Type_Conversion1_out1       : signed(28 DOWNTO 0);  -- sfix29_En29
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous_out1 : signed(28 DOWNTO 0);  -- sfix29_En29
  SIGNAL Delay2_reg                       : vector_of_signed29(0 TO 1);  -- sfix29 [2]
  SIGNAL Delay2_out1                      : signed(28 DOWNTO 0);  -- sfix29_En29
  SIGNAL Delay5_reg                       : vector_of_signed13(0 TO 1);  -- sfix13 [2]
  SIGNAL Delay5_out1                      : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Gain_cast                        : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL Gain_out1                        : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL Delay1_reg                       : vector_of_signed29(0 TO 1);  -- sfix29 [2]
  SIGNAL Delay1_out1                      : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL Data_Type_Conversion2_out1       : signed(38 DOWNTO 0);  -- sfix39_En39
  SIGNAL Unit_Delay_Enabled_Resettable_Synchronous1_out1 : signed(38 DOWNTO 0);  -- sfix39_En39
  SIGNAL Add1_out1                        : signed(38 DOWNTO 0);  -- sfix39_En39
  SIGNAL Delay3_reg                       : vector_of_signed39(0 TO 1);  -- sfix39 [2]
  SIGNAL Delay3_out1                      : signed(38 DOWNTO 0);  -- sfix39_En39
  SIGNAL Add_add_cast                     : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Add_add_cast_1                   : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Add_out1                         : signed(39 DOWNTO 0);  -- sfix40_En39
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay11_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay13_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay13_out1                     : std_logic;

BEGIN
  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_reg(0) <= validIn;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Delay8_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_reg(0) <= internalRst;
        Delay9_reg(1) <= Delay9_reg(0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(1);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_reg(0) <= Delay9_out1;
        Delay10_reg(1) <= Delay10_reg(0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(1);

  Logical_Operator_out1 <= externalRst OR Delay10_out1;

  e_signed <= signed(e);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg <= (OTHERS => to_signed(16#0000#, 13));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_reg(0) <= e_signed;
        Delay7_reg(1) <= Delay7_reg(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(1);

  Gain1_mul_temp <= to_signed(16#00062#, 17) * Delay7_out1;
  Gain1_out1 <= Gain1_mul_temp(28 DOWNTO 0);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_reg(0) <= Gain1_out1;
        Delay6_reg(1) <= Delay6_reg(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(1);

  Data_Type_Conversion1_out1 <= Delay6_out1(25 DOWNTO 0) & '0' & '0' & '0';

  Unit_Delay_Enabled_Resettable_Synchronous_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable_Synchronous_out1 <= to_signed(16#00000000#, 29);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= to_signed(16#00000000#, 29);
        ELSIF Delay4_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous_out1 <= Data_Type_Conversion1_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous_process;


  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Unit_Delay_Enabled_Resettable_Synchronous_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => to_signed(16#0000#, 13));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= e_signed;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  Gain_cast <= resize(Delay5_out1, 30);
  Gain_out1 <= Gain_cast(28 DOWNTO 0);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg(0) <= Gain_out1;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Data_Type_Conversion2_out1 <= Delay1_out1(25 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  Add1_out1 <= Data_Type_Conversion2_out1 + Unit_Delay_Enabled_Resettable_Synchronous1_out1;

  Unit_Delay_Enabled_Resettable_Synchronous1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= to_signed(0, 39);
        ELSIF Delay4_out1 = '1' THEN
          Unit_Delay_Enabled_Resettable_Synchronous1_out1 <= Add1_out1;
        END IF;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Resettable_Synchronous1_process;


  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => to_signed(0, 39));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Unit_Delay_Enabled_Resettable_Synchronous1_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Add_add_cast <= resize(Delay2_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 40);
  Add_add_cast_1 <= resize(Delay3_out1, 40);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  v <= std_logic_vector(Add_out1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_reg(0) <= Delay_out1;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_out1 <= Delay10_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay13_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay13_reg(0) <= Delay12_out1;
        Delay13_reg(1) <= Delay13_reg(0);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(1);

  valid <= Delay11_out1;

  rst <= Delay13_out1;

END rtl;

