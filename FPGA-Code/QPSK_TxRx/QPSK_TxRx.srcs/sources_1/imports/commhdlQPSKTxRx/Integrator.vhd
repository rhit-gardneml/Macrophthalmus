-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Integrator.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Integrator
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer/Coarse Frequency Compensator/Coarse Frequency 
-- Estimator/Integrato
-- Hierarchy Level: 4
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Integrator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        dataIn_im                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        validIn                           :   IN    std_logic;
        IntegOut_re                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        IntegOut_im                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        IntegValid                        :   OUT   std_logic
        );
END Integrator;


ARCHITECTURE rtl OF Integrator IS

  -- Component Declarations
  COMPONENT Reset_Generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          reset_1                         :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Reset_Generator
    USE ENTITY work.Reset_Generator(rtl);

  -- Signals
  SIGNAL Reset_Generator_out1             : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL dataIn_re_signed                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL dataIn_im_signed                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Integ_Reg_out1_re                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Integ_Reg_out1_im                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add1_out1_re                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add1_out1_im                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Store_Reg_out1_re                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Store_Reg_out1_im                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay_out1                       : std_logic;

BEGIN
  -- store the value in the Reg before reset

  u_Reset_Generator : Reset_Generator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              validIn => validIn,
              reset_1 => Reset_Generator_out1
              );

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_re <= to_signed(0, 32);
      Delay1_out1_im <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_re <= dataIn_re_signed;
        Delay1_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Add1_out1_re <= Delay1_out1_re + Integ_Reg_out1_re;
  Add1_out1_im <= Delay1_out1_im + Integ_Reg_out1_im;

  Integ_Reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integ_Reg_out1_re <= to_signed(0, 32);
      Integ_Reg_out1_im <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Reset_Generator_out1 = '1' THEN
          Integ_Reg_out1_re <= to_signed(0, 32);
          Integ_Reg_out1_im <= to_signed(0, 32);
        ELSIF Delay2_out1 = '1' THEN
          Integ_Reg_out1_re <= Add1_out1_re;
          Integ_Reg_out1_im <= Add1_out1_im;
        END IF;
      END IF;
    END IF;
  END PROCESS Integ_Reg_process;


  Store_Reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Store_Reg_out1_re <= to_signed(0, 32);
      Store_Reg_out1_im <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Reset_Generator_out1 = '1' THEN
        Store_Reg_out1_re <= Integ_Reg_out1_re;
        Store_Reg_out1_im <= Integ_Reg_out1_im;
      END IF;
    END IF;
  END PROCESS Store_Reg_process;


  IntegOut_re <= std_logic_vector(Store_Reg_out1_re);

  IntegOut_im <= std_logic_vector(Store_Reg_out1_im);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Reset_Generator_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  IntegValid <= Delay_out1;

END rtl;

