-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Loop_Filter.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Loop_Filter
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Automatic Gain Control/Loop Filter
-- Hierarchy Level: 2
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Loop_Filter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        err_re                            :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
        err_im                            :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
        gain_re                           :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
        gain_im                           :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En28
        );
END Loop_Filter;


ARCHITECTURE rtl OF Loop_Filter IS

  -- Signals
  SIGNAL err_re_signed                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL err_im_signed                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay3_reg_re                    : vector_of_signed33(0 TO 1);  -- sfix33_En28 [2]
  SIGNAL Delay3_reg_im                    : vector_of_signed33(0 TO 1);  -- sfix33_En28 [2]
  SIGNAL Delay3_out1_re                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay3_out1_im                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Gain1_mul_temp                   : signed(65 DOWNTO 0);  -- sfix66_En68
  SIGNAL Gain1_mul_temp_1                 : signed(65 DOWNTO 0);  -- sfix66_En68
  SIGNAL Gain1_out1_re                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Gain1_out1_im                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay2_reg_re                    : vector_of_signed33(0 TO 1);  -- sfix33_En28 [2]
  SIGNAL Delay2_reg_im                    : vector_of_signed33(0 TO 1);  -- sfix33_En28 [2]
  SIGNAL Delay2_out1_re                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay2_out1_im                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay1_out1_re                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay1_out1_im                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_out1_re                      : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_out1_im                      : signed(32 DOWNTO 0);  -- sfix33_En28

BEGIN
  -- Fixed point precision loss warnings
  -- are supressed in Mask Init Callback

  err_re_signed <= signed(err_re);

  err_im_signed <= signed(err_im);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg_re <= (OTHERS => to_signed(0, 33));
      Delay3_reg_im <= (OTHERS => to_signed(0, 33));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg_im(0) <= err_im_signed;
        Delay3_reg_im(1) <= Delay3_reg_im(0);
        Delay3_reg_re(0) <= err_re_signed;
        Delay3_reg_re(1) <= Delay3_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1_re <= Delay3_reg_re(1);
  Delay3_out1_im <= Delay3_reg_im(1);

  Gain1_mul_temp <= signed'("010000011000100100110111010011000") * Delay3_out1_re;
  Gain1_out1_re <= resize(Gain1_mul_temp(65 DOWNTO 40), 33);
  Gain1_mul_temp_1 <= signed'("010000011000100100110111010011000") * Delay3_out1_im;
  Gain1_out1_im <= resize(Gain1_mul_temp_1(65 DOWNTO 40), 33);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg_re <= (OTHERS => to_signed(0, 33));
      Delay2_reg_im <= (OTHERS => to_signed(0, 33));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg_im(0) <= Gain1_out1_im;
        Delay2_reg_im(1) <= Delay2_reg_im(0);
        Delay2_reg_re(0) <= Gain1_out1_re;
        Delay2_reg_re(1) <= Delay2_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(1);
  Delay2_out1_im <= Delay2_reg_im(1);

  Add_out1_re <= Delay2_out1_re + Delay1_out1_re;
  Add_out1_im <= Delay2_out1_im + Delay1_out1_im;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_re <= to_signed(0, 33);
      Delay1_out1_im <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_re <= Add_out1_re;
        Delay1_out1_im <= Add_out1_im;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  gain_re <= std_logic_vector(Delay1_out1_re);

  gain_im <= std_logic_vector(Delay1_out1_im);

END rtl;

