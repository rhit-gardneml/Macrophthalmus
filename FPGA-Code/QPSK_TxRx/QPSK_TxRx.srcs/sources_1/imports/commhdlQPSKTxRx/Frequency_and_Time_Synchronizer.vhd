-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Frequency_and_Time_Synchronizer.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Frequency_and_Time_Synchronizer
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Frequency and Time Synchronizer
-- Hierarchy Level: 1
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Frequency_and_Time_Synchronizer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        validIn                           :   IN    std_logic;
        rstCS                             :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        startOut                          :   OUT   std_logic;
        endOut                            :   OUT   std_logic;
        validOut                          :   OUT   std_logic;
        nSynced                           :   OUT   std_logic;
        normCoarseFreqEst                 :   OUT   std_logic_vector(20 DOWNTO 0)  -- sfix21_En21
        );
END Frequency_and_Time_Synchronizer;


ARCHITECTURE rtl OF Frequency_and_Time_Synchronizer IS

  -- Component Declarations
  COMPONENT Symbol_Synchronizer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Coarse_Frequency_Compensator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          rstCS                           :   OUT   std_logic;
          validOut                        :   OUT   std_logic;
          normalizedFreqEst               :   OUT   std_logic_vector(20 DOWNTO 0)  -- sfix21_En21
          );
  END COMPONENT;

  COMPONENT Carrier_Synchronizer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          internalRst                     :   IN    std_logic;
          validIn                         :   IN    std_logic;
          manualRst                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Preamble_Detector
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          syncPulse                       :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Phase_Ambiguity_Estimation_and_Correction
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          syncPulseIn                     :   IN    std_logic;
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          syncPulseOut                    :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Packet_Controller
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          syncPulse                       :   IN    std_logic;
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          startOut                        :   OUT   std_logic;
          endOut                          :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Symbol_Synchronizer
    USE ENTITY work.Symbol_Synchronizer(rtl);

  FOR ALL : Coarse_Frequency_Compensator
    USE ENTITY work.Coarse_Frequency_Compensator(rtl);

  FOR ALL : Carrier_Synchronizer
    USE ENTITY work.Carrier_Synchronizer(rtl);

  FOR ALL : Preamble_Detector
    USE ENTITY work.Preamble_Detector(rtl);

  FOR ALL : Phase_Ambiguity_Estimation_and_Correction
    USE ENTITY work.Phase_Ambiguity_Estimation_and_Correction(rtl);

  FOR ALL : Packet_Controller
    USE ENTITY work.Packet_Controller(rtl);

  -- Signals
  SIGNAL Symbol_Synchronizer_out1_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Symbol_Synchronizer_out1_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Symbol_Synchronizer_out2         : std_logic;
  SIGNAL Coarse_Frequency_Compensator_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Coarse_Frequency_Compensator_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Coarse_Frequency_Compensator_out2 : std_logic;
  SIGNAL Coarse_Frequency_Compensator_out3 : std_logic;
  SIGNAL Coarse_Frequency_Compensator_out4 : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Carrier_Synchronizer_out1_re     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Carrier_Synchronizer_out1_im     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Carrier_Synchronizer_out2        : std_logic;
  SIGNAL Preamble_Detector_out1_re        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Preamble_Detector_out1_im        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Preamble_Detector_out2           : std_logic;
  SIGNAL Preamble_Detector_out3           : std_logic;
  SIGNAL Phase_Ambiguity_Estimation_and_Correction_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Phase_Ambiguity_Estimation_and_Correction_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Phase_Ambiguity_Estimation_and_Correction_out2 : std_logic;
  SIGNAL Phase_Ambiguity_Estimation_and_Correction_out3 : std_logic;
  SIGNAL dataOut_re_tmp                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_im_tmp                   : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_Symbol_Synchronizer : Symbol_Synchronizer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => dataIn_re,  -- sfix16_En12
              dataIn_im => dataIn_im,  -- sfix16_En12
              validIn => validIn,
              dataOut_re => Symbol_Synchronizer_out1_re,  -- sfix16_En14
              dataOut_im => Symbol_Synchronizer_out1_im,  -- sfix16_En14
              validOut => Symbol_Synchronizer_out2
              );

  u_Coarse_Frequency_Compensator : Coarse_Frequency_Compensator
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => Symbol_Synchronizer_out1_re,  -- sfix16_En14
              dataIn_im => Symbol_Synchronizer_out1_im,  -- sfix16_En14
              validIn => Symbol_Synchronizer_out2,
              dataOut_re => Coarse_Frequency_Compensator_out1_re,  -- sfix16_En14
              dataOut_im => Coarse_Frequency_Compensator_out1_im,  -- sfix16_En14
              rstCS => Coarse_Frequency_Compensator_out2,
              validOut => Coarse_Frequency_Compensator_out3,
              normalizedFreqEst => Coarse_Frequency_Compensator_out4  -- sfix21_En21
              );

  u_Carrier_Synchronizer : Carrier_Synchronizer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => Coarse_Frequency_Compensator_out1_re,  -- sfix16_En14
              dataIn_im => Coarse_Frequency_Compensator_out1_im,  -- sfix16_En14
              internalRst => Coarse_Frequency_Compensator_out2,
              validIn => Coarse_Frequency_Compensator_out3,
              manualRst => rstCS,
              dataOut_re => Carrier_Synchronizer_out1_re,  -- sfix16_En14
              dataOut_im => Carrier_Synchronizer_out1_im,  -- sfix16_En14
              validOut => Carrier_Synchronizer_out2
              );

  u_Preamble_Detector : Preamble_Detector
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => Carrier_Synchronizer_out1_re,  -- sfix16_En14
              dataIn_im => Carrier_Synchronizer_out1_im,  -- sfix16_En14
              validIn => Carrier_Synchronizer_out2,
              dataOut_re => Preamble_Detector_out1_re,  -- sfix16_En14
              dataOut_im => Preamble_Detector_out1_im,  -- sfix16_En14
              syncPulse => Preamble_Detector_out2,
              validOut => Preamble_Detector_out3
              );

  u_Phase_Ambiguity_Estimation_and_Correction : Phase_Ambiguity_Estimation_and_Correction
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => Preamble_Detector_out1_re,  -- sfix16_En14
              dataIn_im => Preamble_Detector_out1_im,  -- sfix16_En14
              syncPulseIn => Preamble_Detector_out2,
              validIn => Preamble_Detector_out3,
              dataOut_re => Phase_Ambiguity_Estimation_and_Correction_out1_re,  -- sfix16_En14
              dataOut_im => Phase_Ambiguity_Estimation_and_Correction_out1_im,  -- sfix16_En14
              syncPulseOut => Phase_Ambiguity_Estimation_and_Correction_out2,
              validOut => Phase_Ambiguity_Estimation_and_Correction_out3
              );

  u_Packet_Controller : Packet_Controller
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => Phase_Ambiguity_Estimation_and_Correction_out1_re,  -- sfix16_En14
              dataIn_im => Phase_Ambiguity_Estimation_and_Correction_out1_im,  -- sfix16_En14
              syncPulse => Phase_Ambiguity_Estimation_and_Correction_out2,
              validIn => Phase_Ambiguity_Estimation_and_Correction_out3,
              dataOut_re => dataOut_re_tmp,  -- sfix16_En14
              dataOut_im => dataOut_im_tmp,  -- sfix16_En14
              startOut => startOut,
              endOut => endOut,
              validOut => validOut
              );

  dataOut_re <= dataOut_re_tmp;

  dataOut_im <= dataOut_im_tmp;

  nSynced <= Preamble_Detector_out2;

  normCoarseFreqEst <= Coarse_Frequency_Compensator_out4;

END rtl;

