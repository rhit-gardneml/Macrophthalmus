-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\commhdlQPSKTxRx\Automatic_Gain_Control.vhd
-- Created: 2024-01-25 16:33:03
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Automatic_Gain_Control
-- Source Path: commhdlQPSKTxRx/QPSK Rx/Automatic Gain Control
-- Hierarchy Level: 1
-- Model version: 7.26
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.QPSK_Rx_pkg.ALL;

ENTITY Automatic_Gain_Control IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END Automatic_Gain_Control;


ARCHITECTURE rtl OF Automatic_Gain_Control IS

  -- Component Declarations
  COMPONENT Error_Detector
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          err_re                          :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          err_im                          :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En28
          );
  END COMPONENT;

  COMPONENT Loop_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          err_re                          :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          err_im                          :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          gain_re                         :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          gain_im                         :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Error_Detector
    USE ENTITY work.Error_Detector(rtl);

  FOR ALL : Loop_Filter
    USE ENTITY work.Loop_Filter(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay4_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Loop_Filter_out1_im              : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL Loop_Filter_out1_im_signed       : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Error_Detector_out1_re           : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL Error_Detector_out1_im           : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL Loop_Filter_out1_re              : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL Loop_Filter_out1_re_signed       : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Data_Type_Conversion_out1_re     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion_out1_im     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay1_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_mul_temp                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_mul_temp_1               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_mul_temp_2               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product_add_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_mul_temp_3               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product_add_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay2_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay5_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_Error_Detector : Error_Detector
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn_re => std_logic_vector(Delay2_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay2_out1_im),  -- sfix16_En14
              err_re => Error_Detector_out1_re,  -- sfix33_En28
              err_im => Error_Detector_out1_im  -- sfix33_En28
              );

  u_Loop_Filter : Loop_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              err_re => Error_Detector_out1_re,  -- sfix33_En28
              err_im => Error_Detector_out1_im,  -- sfix33_En28
              gain_re => Loop_Filter_out1_re,  -- sfix33_En28
              gain_im => Loop_Filter_out1_im  -- sfix33_En28
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay4_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg_im(0) <= dataIn_im_signed;
        Delay4_reg_im(1) <= Delay4_reg_im(0);
        Delay4_reg_re(0) <= dataIn_re_signed;
        Delay4_reg_re(1) <= Delay4_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(1);
  Delay4_out1_im <= Delay4_reg_im(1);

  Loop_Filter_out1_im_signed <= signed(Loop_Filter_out1_im);

  Loop_Filter_out1_re_signed <= signed(Loop_Filter_out1_re);

  Data_Type_Conversion_out1_re <= Loop_Filter_out1_re_signed(29 DOWNTO 14);
  Data_Type_Conversion_out1_im <= Loop_Filter_out1_im_signed(29 DOWNTO 14);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg_im(0) <= Data_Type_Conversion_out1_im;
        Delay1_reg_im(1) <= Delay1_reg_im(0);
        Delay1_reg_re(0) <= Data_Type_Conversion_out1_re;
        Delay1_reg_re(1) <= Delay1_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(1);
  Delay1_out1_im <= Delay1_reg_im(1);

  Product_mul_temp <= Delay4_out1_re * Delay1_out1_re;
  Product_sub_cast <= Product_mul_temp(29 DOWNTO 14);
  Product_mul_temp_1 <= Delay4_out1_im * Delay1_out1_im;
  Product_sub_cast_1 <= Product_mul_temp_1(29 DOWNTO 14);
  Product_out1_re <= Product_sub_cast - Product_sub_cast_1;
  Product_mul_temp_2 <= Delay4_out1_im * Delay1_out1_re;
  Product_add_cast <= Product_mul_temp_2(29 DOWNTO 14);
  Product_mul_temp_3 <= Delay4_out1_re * Delay1_out1_im;
  Product_add_cast_1 <= Product_mul_temp_3(29 DOWNTO 14);
  Product_out1_im <= Product_add_cast + Product_add_cast_1;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay2_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg_im(0) <= Product_out1_im;
        Delay2_reg_im(1) <= Delay2_reg_im(0);
        Delay2_reg_re(0) <= Product_out1_re;
        Delay2_reg_re(1) <= Delay2_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(1);
  Delay2_out1_im <= Delay2_reg_im(1);

  dataOut_re <= std_logic_vector(Delay2_out1_re);

  dataOut_im <= std_logic_vector(Delay2_out1_im);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= validIn;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Delay5_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  validOut <= Delay3_out1;

END rtl;

